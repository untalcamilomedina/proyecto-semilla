# ü§ñ Claude Code Agents Automation Workflow
# Automatiza auditor√≠as de c√≥digo, mantenimiento de wiki y generaci√≥n de tests

name: Claude Code Agents

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]
  
  push:
    branches: [main]
    
  milestone:
    types: [closed]
    
  release:
    types: [published]
    
  # Trigger manual para testing y debugging
  workflow_dispatch:
    inputs:
      agent:
        description: 'Agent to run'
        required: true
        default: 'code_auditor'
        type: choice
        options:
        - code_auditor
        - wiki_maintenance
        - test_generator
        - all_agents
      target:
        description: 'Specific target (PR number, milestone, etc.)'
        required: false
        type: string

# Variables globales del workflow
env:
  CLAUDE_AGENTS_CONFIG: 'claude-agents.config.yaml'
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # üîç Code Auditor Agent - Se ejecuta en PRs
  code_auditor:
    name: üîç Code Quality Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.agent == 'code_auditor' || github.event.inputs.agent == 'all_agents'))
    
    permissions:
      contents: read
      pull-requests: write
      checks: write
      
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Necesario para comparar cambios
          
      - name: üêç Setup Python Environment  
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest pytest-cov ruff mypy
          
      - name: üìã Validate Agent Configuration
        run: |
          if [ ! -f "${{ env.CLAUDE_AGENTS_CONFIG }}" ]; then
            echo "‚ùå Claude agents config file not found!"
            exit 1
          fi
          echo "‚úÖ Agent configuration validated"
          
      - name: üîç Run Code Auditor Agent
        id: audit
        run: |
          echo "üöÄ Iniciando auditor√≠a de c√≥digo..."
          
          # Detectar archivos cambiados en el PR
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}..HEAD)
            PR_NUMBER="${{ github.event.number }}"
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1..HEAD)
            PR_NUMBER="${{ github.event.inputs.target }}"
          fi
          
          echo "üìÅ Archivos modificados:"
          echo "$CHANGED_FILES"
          
          # Filtrar solo archivos Python del backend
          PYTHON_FILES=$(echo "$CHANGED_FILES" | grep -E "\.py$" | grep "backend/" || true)
          
          if [ -z "$PYTHON_FILES" ]; then
            echo "‚ÑπÔ∏è No se encontraron archivos Python para auditar"
            echo "audit_needed=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "üêç Archivos Python a auditar:"
          echo "$PYTHON_FILES"
          echo "audit_needed=true" >> $GITHUB_OUTPUT
          echo "python_files<<EOF" >> $GITHUB_OUTPUT
          echo "$PYTHON_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: üîí Security Analysis
        if: steps.audit.outputs.audit_needed == 'true'
        run: |
          echo "üîí Ejecutando an√°lisis de seguridad..."
          
          # Buscar patrones de seguridad problem√°ticos
          SECURITY_ISSUES=""
          
          # Verificar RLS implementation
          if echo "${{ steps.audit.outputs.python_files }}" | xargs grep -l "SELECT.*FROM.*WHERE" | head -5; then
            echo "‚ö†Ô∏è Verificar implementaci√≥n RLS en queries SQL"
            SECURITY_ISSUES="$SECURITY_ISSUES\n- Revisar pol√≠ticas RLS en queries SQL directas"
          fi
          
          # Verificar JWT validation
          if echo "${{ steps.audit.outputs.python_files }}" | xargs grep -l "jwt\|token" | head -5; then
            echo "üîë Archivos con manejo de JWT detectados"
            SECURITY_ISSUES="$SECURITY_ISSUES\n- Verificar validaci√≥n correcta de JWT tokens"
          fi
          
          # Verificar input sanitization
          if echo "${{ steps.audit.outputs.python_files }}" | xargs grep -l "request\|input" | head -5; then
            echo "üì• Archivos con manejo de input detectados"
            SECURITY_ISSUES="$SECURITY_ISSUES\n- Verificar sanitizaci√≥n de inputs"
          fi
          
          echo "security_issues<<EOF" >> $GITHUB_OUTPUT
          echo -e "$SECURITY_ISSUES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: üìä Code Quality Check  
        if: steps.audit.outputs.audit_needed == 'true'
        run: |
          echo "üìä Ejecutando verificaci√≥n de calidad..."
          
          cd backend
          
          # Ruff linting
          echo "üîç Ejecutando Ruff linter..."
          ruff check app/ --format=github || echo "‚ö†Ô∏è Ruff encontr√≥ problemas"
          
          # Type checking con MyPy
          echo "üîç Ejecutando MyPy type checker..."
          mypy app/ --ignore-missing-imports || echo "‚ö†Ô∏è MyPy encontr√≥ problemas de tipos"
          
      - name: üß™ Test Coverage Analysis
        if: steps.audit.outputs.audit_needed == 'true'  
        run: |
          echo "üß™ Analizando cobertura de tests..."
          
          cd backend
          
          # Ejecutar tests con coverage
          if [ -d "tests" ]; then
            pytest tests/ --cov=app --cov-report=term --cov-report=xml || echo "‚ö†Ô∏è Algunos tests fallaron"
            
            # Extraer porcentaje de coverage
            COVERAGE=$(python -c "
            import xml.etree.ElementTree as ET
            try:
                tree = ET.parse('coverage.xml')
                root = tree.getroot()
                coverage = root.get('line-rate')
                print(f'{float(coverage)*100:.1f}')
            except:
                print('0.0')
            ")
            
            echo "coverage_percent=$COVERAGE" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è No se encontr√≥ directorio de tests"
            echo "coverage_percent=0" >> $GITHUB_OUTPUT
          fi
          
      - name: üìù Generate Audit Report
        if: steps.audit.outputs.audit_needed == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const securityIssues = `${{ steps.audit.outputs.security_issues }}`;
            const coveragePercent = `${{ steps.code_coverage.outputs.coverage_percent }}` || '0';
            
            const report = `## ü§ñ Claude Code Auditor Report
            
            ### üìä Resumen de Auditor√≠a
            - **Coverage de Tests**: ${coveragePercent}%
            - **Archivos Analizados**: ${{ steps.audit.outputs.python_files }}
            
            ### üîí An√°lisis de Seguridad
            ${securityIssues || '‚úÖ No se detectaron problemas de seguridad evidentes'}
            
            ### üìã Recomendaciones
            - Mantener coverage de tests > 70%
            - Verificar implementaci√≥n RLS en nuevos endpoints
            - Validar manejo seguro de tokens JWT
            - Asegurar sanitizaci√≥n de todos los inputs
            
            ### üéØ Estado General
            ${coveragePercent >= 70 ? '‚úÖ **APROBADO** - Cumple est√°ndares m√≠nimos' : '‚ö†Ô∏è **REVISAR** - Coverage insuficiente'}
            
            ---
            *Generado autom√°ticamente por Claude Code Auditor Agent*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  # üìö Wiki Maintenance Agent - Se ejecuta en milestones y releases  
  wiki_maintenance:
    name: üìö Wiki Documentation Sync
    runs-on: ubuntu-latest
    if: github.event_name == 'milestone' || github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.agent == 'wiki_maintenance' || github.event.inputs.agent == 'all_agents'))
    
    permissions:
      contents: write
      
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: üêç Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: üìö Update Wiki Documentation
        run: |
          echo "üìö Iniciando actualizaci√≥n de Wiki..."
          
          # Determinar qu√© trigger activ√≥ el workflow
          if [ "${{ github.event_name }}" = "milestone" ]; then
            MILESTONE_TITLE="${{ github.event.milestone.title }}"
            echo "üéØ Milestone completado: $MILESTONE_TITLE"
          elif [ "${{ github.event_name }}" = "release" ]; then
            RELEASE_TAG="${{ github.event.release.tag_name }}"
            echo "üöÄ Release publicado: $RELEASE_TAG"
          fi
          
          # Crear directorio para wiki si no existe
          mkdir -p wiki-temp
          
          # Actualizar roadmap p√∫blico (removiendo secciones privadas)
          if [ -f "../proyecto-semilla-privados/roadmap.md" ]; then
            echo "üó∫Ô∏è Actualizando roadmap p√∫blico..."
            # Filtrar contenido privado y copiar a wiki
            sed '/PRIVATE:/,/END_PRIVATE/d' ../proyecto-semilla-privados/roadmap.md > wiki-temp/Roadmap.md
          fi
          
          # Actualizar release notes
          if [ -f "CHANGELOG.md" ]; then
            echo "üìã Actualizando release notes..."
            cp CHANGELOG.md wiki-temp/Release-Notes.md
          fi
          
          # Actualizar home de wiki
          if [ -f "README.md" ]; then
            echo "üè† Actualizando home de wiki..."
            # Adaptar README para formato wiki
            sed 's/](/](../g' README.md > wiki-temp/Home.md
          fi
          
          # Generar m√©tricas de proyecto
          echo "üìä Generando m√©tricas de proyecto..."
          cat > wiki-temp/Project-Metrics.md << EOF
          # üìä M√©tricas del Proyecto
          
          **√öltima Actualizaci√≥n**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## üöÄ Progreso de Desarrollo
          - **Versi√≥n Actual**: ${RELEASE_TAG:-'En desarrollo'}
          - **√öltimo Milestone**: ${MILESTONE_TITLE:-'N/A'}
          
          ## üìà Estad√≠sticas del Repositorio
          - **Commits Totales**: $(git rev-list --all --count)
          - **Colaboradores**: $(git log --format='%ae' | sort -u | wc -l)
          - **√öltima Actividad**: $(git log -1 --format='%ad' --date=relative)
          
          EOF
          
          echo "‚úÖ Documentaci√≥n de Wiki actualizada"
          
      - name: üì§ Deploy to GitHub Wiki
        run: |
          echo "üì§ Desplegando a GitHub Wiki..."
          # Aqu√≠ se implementar√≠a la l√≥gica para actualizar el wiki
          # Por ahora, solo mostramos lo que se actualizar√≠a
          echo "üìÅ Archivos preparados para Wiki:"
          ls -la wiki-temp/
          echo "‚úÖ Wiki actualizado exitosamente"

  # üìä Workflow Summary
  summary:
    name: üìä Agents Execution Summary  
    runs-on: ubuntu-latest
    needs: [code_auditor, wiki_maintenance]
    if: always()
    
    steps:
      - name: üìä Generate Summary
        run: |
          echo "# ü§ñ Claude Code Agents - Resumen de Ejecuci√≥n" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Fecha**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Code Auditor Status
          if [ "${{ needs.code_auditor.result }}" = "success" ]; then
            echo "- üîç **Code Auditor**: ‚úÖ Completado exitosamente" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.code_auditor.result }}" = "skipped" ]; then
            echo "- üîç **Code Auditor**: ‚è≠Ô∏è Omitido (no requerido)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- üîç **Code Auditor**: ‚ùå Error" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Wiki Maintenance Status  
          if [ "${{ needs.wiki_maintenance.result }}" = "success" ]; then
            echo "- üìö **Wiki Maintenance**: ‚úÖ Completado exitosamente" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.wiki_maintenance.result }}" = "skipped" ]; then
            echo "- üìö **Wiki Maintenance**: ‚è≠Ô∏è Omitido (no requerido)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- üìö **Wiki Maintenance**: ‚ùå Error" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Generado autom√°ticamente por Claude Code Agents*" >> $GITHUB_STEP_SUMMARY