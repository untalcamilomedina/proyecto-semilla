"""
Discovery Engine - Motor Principal de Descubrimiento de Arquitectura

Orquesta todos los analizadores especializados para proporcionar un an√°lisis
completo e integrado de la arquitectura del proyecto en espa√±ol.

Este es el componente principal que coordina:
- DatabaseAnalyzer: An√°lisis de modelos y esquemas
- APIPatternDetector: Detecci√≥n de patrones de API
- FrontendAnalyzer: An√°lisis de componentes React
- SecurityMapper: Mapeo de seguridad
- PatternRecognizer: Reconocimiento de patrones con IA
- I18nManager: Gesti√≥n de internacionalizaci√≥n

Caracter√≠sticas:
- An√°lisis integral y coordinado de toda la arquitectura
- Generaci√≥n de reportes completos en espa√±ol
- Recomendaciones contextualizadas e inteligentes
- Detecci√≥n autom√°tica de problemas de integraci√≥n
- M√©tricas de calidad unificadas
- An√°lisis predictivo para escalabilidad futura
"""

import os
import time
from pathlib import Path
from typing import Dict, List, Any, Optional
import logging
from dataclasses import dataclass, field
import json

from .i18n_manager import get_i18n, setup_i18n
from .analyzers.database_analyzer import DatabaseAnalyzer
from .analyzers.api_pattern_detector import APIPatternDetector
from .analyzers.frontend_analyzer import FrontendAnalyzer
from .analyzers.security_mapper import SecurityMapper
from .analyzers.pattern_recognizer import PatternRecognizer

logger = logging.getLogger(__name__)


@dataclass
class AnalysisMetrics:
    """M√©tricas generales del an√°lisis"""
    start_time: float
    end_time: Optional[float] = None
    duration_seconds: Optional[float] = None
    files_analyzed: int = 0
    errors_encountered: int = 0
    warnings_generated: int = 0
    
    # M√©tricas por componente
    database_models_found: int = 0
    api_endpoints_found: int = 0
    frontend_components_found: int = 0
    security_policies_found: int = 0
    patterns_detected: int = 0
    
    # M√©tricas de calidad
    overall_architecture_score: float = 0.0
    maintainability_score: float = 0.0
    security_score: float = 0.0
    consistency_score: float = 0.0


@dataclass
class IntegrationInsight:
    """Insight de integraci√≥n entre componentes"""
    type: str  # consistency, integration, compatibility
    severity: str  # info, warning, error, critical
    title: str
    description: str
    components_involved: List[str] = field(default_factory=list)
    recommendation: str = ""
    impact: str = ""


@dataclass
class DiscoveryResult:
    """Resultado completo del an√°lisis de descubrimiento"""
    # Resultados de analizadores individuales
    database_analysis: Dict[str, Any] = field(default_factory=dict)
    api_analysis: Dict[str, Any] = field(default_factory=dict)
    frontend_analysis: Dict[str, Any] = field(default_factory=dict)
    security_analysis: Dict[str, Any] = field(default_factory=dict)
    pattern_analysis: Dict[str, Any] = field(default_factory=dict)
    
    # An√°lisis integrado
    integration_insights: List[IntegrationInsight] = field(default_factory=list)
    cross_component_recommendations: List[str] = field(default_factory=list)
    architecture_summary: Dict[str, Any] = field(default_factory=dict)
    
    # M√©tricas y reportes
    metrics: Optional[AnalysisMetrics] = None
    spanish_report: str = ""
    english_report: str = ""
    json_summary: Dict[str, Any] = field(default_factory=dict)
    
    # Configuraci√≥n y metadatos
    project_path: str = ""
    discovery_version: str = "1.0.0"
    timestamp: str = ""


class DiscoveryEngine:
    """
    Motor Principal de Descubrimiento de Arquitectura
    
    Coordina todos los analizadores para proporcionar un an√°lisis completo
    e integrado de la arquitectura del proyecto con reportes en espa√±ol.
    """
    
    def __init__(self, locale: str = "es"):
        """
        Inicializa el motor de descubrimiento.
        
        Args:
            locale: Idioma para reportes ('es' o 'en')
        """
        # Configurar sistema de internacionalizaci√≥n
        self.i18n = setup_i18n(locale)
        self.locale = locale
        
        # Inicializar analizadores especializados
        self.database_analyzer = DatabaseAnalyzer()
        self.api_detector = APIPatternDetector()
        self.frontend_analyzer = FrontendAnalyzer()
        self.security_mapper = SecurityMapper()
        self.pattern_recognizer = PatternRecognizer()
        
        # Estado del an√°lisis
        self.current_analysis: Optional[DiscoveryResult] = None
        self.is_analyzing = False
        
        logger.info("üöÄ Architecture Discovery Engine inicializado")
    
    def discover_architecture(self, project_path: str, 
                            include_patterns: bool = True,
                            include_security: bool = True,
                            verbose: bool = False) -> DiscoveryResult:
        """
        Ejecuta el an√°lisis completo de arquitectura del proyecto.
        
        Args:
            project_path: Ruta absoluta al directorio ra√≠z del proyecto
            include_patterns: Si incluir an√°lisis de patrones con IA
            include_security: Si incluir an√°lisis de seguridad
            verbose: Si mostrar informaci√≥n detallada durante el an√°lisis
            
        Returns:
            Resultado completo del an√°lisis de descubrimiento
            
        Raises:
            FileNotFoundError: Si el proyecto no existe
            Exception: Si hay errores durante el an√°lisis
        """
        if self.is_analyzing:
            raise RuntimeError("Ya hay un an√°lisis en progreso")
        
        # Validar proyecto
        project_path = Path(project_path).resolve()
        if not project_path.exists():
            raise FileNotFoundError(f"Proyecto no encontrado: {project_path}")
        
        logger.info(f"üîç Iniciando descubrimiento de arquitectura: {project_path}")
        
        # Inicializar an√°lisis
        self.is_analyzing = True
        metrics = AnalysisMetrics(start_time=time.time())
        
        result = DiscoveryResult(
            project_path=str(project_path),
            timestamp=time.strftime("%Y-%m-%d %H:%M:%S")
        )
        
        try:
            print(f"\n{self.i18n.t('analysis.starting')}")
            
            # 1. An√°lisis de Base de Datos
            if verbose:
                print(f"üìä {self.i18n.t('database.analyzing')}")
            
            try:
                db_analysis = self.database_analyzer.analyze_project(str(project_path))
                result.database_analysis = self.database_analyzer.get_analysis_summary()
                metrics.database_models_found = result.database_analysis.get("total_models", 0)
                
                if verbose:
                    print(f"   ‚úì {metrics.database_models_found} modelos encontrados")
                    
            except Exception as e:
                logger.error(f"Error en an√°lisis de base de datos: {e}")
                metrics.errors_encountered += 1
                result.database_analysis = {"error": str(e)}
            
            # 2. An√°lisis de API
            if verbose:
                print(f"üîå {self.i18n.t('api.analyzing')}")
            
            try:
                api_analysis = self.api_detector.analyze_project(str(project_path))
                result.api_analysis = self.api_detector.get_analysis_summary()
                metrics.api_endpoints_found = result.api_analysis.get("total_endpoints", 0)
                
                if verbose:
                    print(f"   ‚úì {metrics.api_endpoints_found} endpoints encontrados")
                    
            except Exception as e:
                logger.error(f"Error en an√°lisis de API: {e}")
                metrics.errors_encountered += 1
                result.api_analysis = {"error": str(e)}
            
            # 3. An√°lisis de Frontend
            if verbose:
                print(f"üé® {self.i18n.t('frontend.analyzing')}")
            
            try:
                frontend_analysis = self.frontend_analyzer.analyze_project(str(project_path))
                result.frontend_analysis = self.frontend_analyzer.get_analysis_summary()
                metrics.frontend_components_found = result.frontend_analysis.get("total_components", 0)
                
                if verbose:
                    print(f"   ‚úì {metrics.frontend_components_found} componentes encontrados")
                    
            except Exception as e:
                logger.error(f"Error en an√°lisis de frontend: {e}")
                metrics.errors_encountered += 1
                result.frontend_analysis = {"error": str(e)}
            
            # 4. An√°lisis de Seguridad (opcional)
            if include_security:
                if verbose:
                    print(f"üîí {self.i18n.t('security.analyzing')}")
                
                try:
                    security_analysis = self.security_mapper.analyze_project(str(project_path))
                    result.security_analysis = self.security_mapper.get_analysis_summary()
                    metrics.security_policies_found = result.security_analysis.get("total_rls_policies", 0)
                    
                    if verbose:
                        print(f"   ‚úì Score de seguridad: {result.security_analysis.get('security_score', 0)}/100")
                        
                except Exception as e:
                    logger.error(f"Error en an√°lisis de seguridad: {e}")
                    metrics.errors_encountered += 1
                    result.security_analysis = {"error": str(e)}
            
            # 5. Reconocimiento de Patrones con IA (opcional)
            if include_patterns:
                if verbose:
                    print("üß† Ejecutando reconocimiento inteligente de patrones...")
                
                try:
                    pattern_analysis = self.pattern_recognizer.analyze_patterns(
                        result.database_analysis,
                        result.api_analysis,
                        result.frontend_analysis,
                        result.security_analysis,
                        str(project_path)
                    )
                    result.pattern_analysis = self.pattern_recognizer.get_analysis_summary()
                    metrics.patterns_detected = result.pattern_analysis.get("patterns_detected", 0)
                    
                    if verbose:
                        print(f"   ‚úì {metrics.patterns_detected} patrones detectados")
                        
                except Exception as e:
                    logger.error(f"Error en reconocimiento de patrones: {e}")
                    metrics.errors_encountered += 1
                    result.pattern_analysis = {"error": str(e)}
            
            # 6. An√°lisis de Integraci√≥n
            if verbose:
                print("üîó Analizando integraci√≥n entre componentes...")
            
            integration_insights = self._analyze_integration(result)
            result.integration_insights = integration_insights
            
            # 7. Generar Recomendaciones Cross-Component
            cross_recommendations = self._generate_cross_component_recommendations(result)
            result.cross_component_recommendations = cross_recommendations
            
            # 8. Crear Resumen de Arquitectura
            architecture_summary = self._create_architecture_summary(result)
            result.architecture_summary = architecture_summary
            
            # 9. Calcular M√©tricas Finales
            self._calculate_overall_metrics(metrics, result)
            metrics.end_time = time.time()
            metrics.duration_seconds = metrics.end_time - metrics.start_time
            result.metrics = metrics
            
            # 10. Generar Reportes
            if verbose:
                print("üìù Generando reportes...")
            
            result.spanish_report = self._generate_spanish_report(result)
            
            if self.locale != "es":
                result.english_report = self._generate_english_report(result)
            
            result.json_summary = self._generate_json_summary(result)
            
            # Finalizar
            self.current_analysis = result
            
            success_msg = self.i18n.t('analysis.completed')
            print(f"\n‚úÖ {success_msg}")
            print(f"‚è±Ô∏è  Duraci√≥n: {metrics.duration_seconds:.1f} segundos")
            print(f"üìà Score general: {metrics.overall_architecture_score:.1f}/10")
            
            if metrics.errors_encountered > 0:
                print(f"‚ö†Ô∏è  {metrics.errors_encountered} errores encontrados (ver logs)")
            
            return result
            
        except Exception as e:
            logger.error(f"Error cr√≠tico durante an√°lisis: {e}")
            metrics.errors_encountered += 1
            raise
            
        finally:
            self.is_analyzing = False
    
    def _analyze_integration(self, result: DiscoveryResult) -> List[IntegrationInsight]:
        """Analiza la integraci√≥n entre componentes de la arquitectura"""
        insights = []
        
        db_analysis = result.database_analysis
        api_analysis = result.api_analysis
        frontend_analysis = result.frontend_analysis
        security_analysis = result.security_analysis
        
        # Verificar consistencia de autenticaci√≥n
        backend_uses_jwt = security_analysis.get("uses_jwt", False)
        frontend_framework = frontend_analysis.get("framework", "")
        
        if backend_uses_jwt and frontend_framework:
            insights.append(IntegrationInsight(
                type="integration",
                severity="info",
                title="Autenticaci√≥n JWT Backend-Frontend",
                description="Backend usa JWT, verificar integraci√≥n con frontend",
                components_involved=["Backend Auth", "Frontend Auth"],
                recommendation="Configurar interceptores de JWT en el cliente",
                impact="Autenticaci√≥n consistente en toda la aplicaci√≥n"
            ))
        
        # Verificar multi-tenancy consistente
        db_multi_tenant = db_analysis.get("multi_tenant", False)
        security_multi_tenant = security_analysis.get("multi_tenant_security", False)
        
        if db_multi_tenant and not security_multi_tenant:
            insights.append(IntegrationInsight(
                type="consistency",
                severity="warning",
                title="Multi-tenancy Inconsistente",
                description="Base de datos configurada para multi-tenancy pero seguridad incompleta",
                components_involved=["Database", "Security"],
                recommendation="Implementar pol√≠ticas RLS completas para aislamiento de tenants",
                impact="Posible filtraci√≥n de datos entre tenants"
            ))
        
        # Verificar API y Frontend compatibility
        total_endpoints = api_analysis.get("total_endpoints", 0)
        total_components = frontend_analysis.get("total_components", 0)
        
        if total_endpoints > 20 and total_components < 10:
            insights.append(IntegrationInsight(
                type="compatibility",
                severity="warning",
                title="Desbalance API-Frontend",
                description=f"Muchos endpoints ({total_endpoints}) vs pocos componentes ({total_components})",
                components_involved=["API", "Frontend"],
                recommendation="Verificar que todos los endpoints tengan interfaz de usuario",
                impact="Posible funcionalidad backend no utilizada"
            ))
        
        # Verificar TypeScript consistency
        uses_typescript = frontend_analysis.get("typescript_usage", False)
        if not uses_typescript and total_components > 30:
            insights.append(IntegrationInsight(
                type="consistency",
                severity="info",
                title="TypeScript para Proyectos Grandes",
                description="Proyecto frontend grande sin TypeScript",
                components_involved=["Frontend"],
                recommendation="Considerar migraci√≥n a TypeScript para mejor mantenibilidad",
                impact="Mejor type safety y developer experience"
            ))
        
        return insights
    
    def _generate_cross_component_recommendations(self, result: DiscoveryResult) -> List[str]:
        """Genera recomendaciones que cruzan m√∫ltiples componentes"""
        recommendations = []
        
        db_analysis = result.database_analysis
        api_analysis = result.api_analysis
        frontend_analysis = result.frontend_analysis
        security_analysis = result.security_analysis
        
        # Recomendaci√≥n de testing integral
        total_complexity = (
            db_analysis.get("total_models", 0) +
            api_analysis.get("total_endpoints", 0) +
            frontend_analysis.get("total_components", 0)
        )
        
        if total_complexity > 50:
            recommendations.append(
                "Implementar testing de integraci√≥n end-to-end para validar flujos completos"
            )
        
        # Recomendaci√≥n de monitoreo
        if api_analysis.get("total_endpoints", 0) > 15:
            recommendations.append(
                "Configurar monitoreo y logging distribuido entre backend y frontend"
            )
        
        # Recomendaci√≥n de documentaci√≥n
        if not api_analysis.get("uses_openapi", False):
            recommendations.append(
                "Generar documentaci√≥n API autom√°tica con OpenAPI/Swagger para el frontend"
            )
        
        # Recomendaci√≥n de performance
        if frontend_analysis.get("total_components", 0) > 40:
            recommendations.append(
                "Implementar lazy loading y code splitting para optimizar carga inicial"
            )
        
        # Recomendaci√≥n de seguridad integral
        security_score = security_analysis.get("security_score", 100)
        if security_score < 80:
            recommendations.append(
                "Implementar security headers, CSP y validaci√≥n consistente frontend-backend"
            )
        
        return recommendations
    
    def _create_architecture_summary(self, result: DiscoveryResult) -> Dict[str, Any]:
        """Crea un resumen ejecutivo de la arquitectura"""
        db_analysis = result.database_analysis
        api_analysis = result.api_analysis
        frontend_analysis = result.frontend_analysis
        security_analysis = result.security_analysis
        pattern_analysis = result.pattern_analysis
        
        summary = {
            # Clasificaci√≥n de arquitectura
            "architecture_type": self._classify_architecture_type(result),
            "complexity_level": self._assess_complexity_level(result),
            "maturity_level": self._assess_maturity_level(result),
            
            # Stack tecnol√≥gico
            "technology_stack": {
                "backend": "FastAPI + SQLAlchemy" if api_analysis.get("total_endpoints", 0) > 0 else "Unknown",
                "frontend": frontend_analysis.get("framework", "Unknown"),
                "database": "PostgreSQL" if db_analysis.get("total_models", 0) > 0 else "Unknown",
                "styling": frontend_analysis.get("styling_approach", "Unknown"),
                "auth": security_analysis.get("auth_type", "Unknown") if security_analysis.get("uses_jwt") else "None"
            },
            
            # Caracter√≠sticas principales
            "key_features": [],
            
            # Estad√≠sticas clave
            "key_metrics": {
                "total_models": db_analysis.get("total_models", 0),
                "total_endpoints": api_analysis.get("total_endpoints", 0),
                "total_components": frontend_analysis.get("total_components", 0),
                "security_score": security_analysis.get("security_score", 0),
                "patterns_detected": pattern_analysis.get("patterns_detected", 0)
            },
            
            # Assessment general
            "strengths": [],
            "areas_for_improvement": [],
            "recommended_next_steps": []
        }
        
        # Identificar caracter√≠sticas clave
        if db_analysis.get("multi_tenant", False):
            summary["key_features"].append("Multi-tenant Architecture")
        
        if security_analysis.get("uses_rls", False):
            summary["key_features"].append("Row-Level Security")
        
        if api_analysis.get("uses_openapi", False):
            summary["key_features"].append("OpenAPI Documentation")
        
        if frontend_analysis.get("typescript_usage", False):
            summary["key_features"].append("TypeScript")
        
        # Identificar fortalezas
        if security_analysis.get("security_score", 0) > 80:
            summary["strengths"].append("Modelo de seguridad robusto")
        
        if pattern_analysis.get("patterns_detected", 0) > 3:
            summary["strengths"].append("Uso consistente de patrones arquitect√≥nicos")
        
        if frontend_analysis.get("typescript_usage", False):
            summary["strengths"].append("Type safety con TypeScript")
        
        # Identificar √°reas de mejora
        if security_analysis.get("security_score", 0) < 60:
            summary["areas_for_improvement"].append("Fortalecer modelo de seguridad")
        
        if not api_analysis.get("uses_openapi", False):
            summary["areas_for_improvement"].append("Implementar documentaci√≥n autom√°tica de API")
        
        integration_issues = len(result.integration_insights)
        if integration_issues > 2:
            summary["areas_for_improvement"].append("Resolver inconsistencias de integraci√≥n")
        
        return summary
    
    def _classify_architecture_type(self, result: DiscoveryResult) -> str:
        """Clasifica el tipo de arquitectura"""
        api_endpoints = result.api_analysis.get("total_endpoints", 0)
        frontend_components = result.frontend_analysis.get("total_components", 0)
        
        if api_endpoints > 30 and frontend_components > 40:
            return "Full-Stack Enterprise"
        elif api_endpoints > 15 or frontend_components > 20:
            return "Full-Stack Standard"
        elif api_endpoints > 0 and frontend_components > 0:
            return "Full-Stack B√°sico"
        elif api_endpoints > 0:
            return "Backend API"
        elif frontend_components > 0:
            return "Frontend Application"
        else:
            return "Unknown"
    
    def _assess_complexity_level(self, result: DiscoveryResult) -> str:
        """Eval√∫a el nivel de complejidad del proyecto"""
        total_complexity = (
            result.database_analysis.get("total_models", 0) +
            result.api_analysis.get("total_endpoints", 0) +
            result.frontend_analysis.get("total_components", 0)
        )
        
        if total_complexity > 100:
            return "Alta"
        elif total_complexity > 50:
            return "Media"
        elif total_complexity > 20:
            return "Baja"
        else:
            return "Muy Baja"
    
    def _assess_maturity_level(self, result: DiscoveryResult) -> str:
        """Eval√∫a el nivel de madurez del proyecto"""
        maturity_score = 0
        
        # Factores de madurez
        if result.security_analysis.get("uses_jwt", False):
            maturity_score += 1
        if result.api_analysis.get("uses_openapi", False):
            maturity_score += 1
        if result.frontend_analysis.get("typescript_usage", False):
            maturity_score += 1
        if result.security_analysis.get("uses_rls", False):
            maturity_score += 1
        if result.pattern_analysis.get("patterns_detected", 0) > 3:
            maturity_score += 1
        if result.security_analysis.get("security_score", 0) > 70:
            maturity_score += 1
        
        if maturity_score >= 5:
            return "Madura"
        elif maturity_score >= 3:
            return "Intermedia"
        elif maturity_score >= 1:
            return "B√°sica"
        else:
            return "Inicial"
    
    def _calculate_overall_metrics(self, metrics: AnalysisMetrics, result: DiscoveryResult):
        """Calcula m√©tricas generales del an√°lisis"""
        # Score de arquitectura general (promedio ponderado)
        scores = []
        weights = []
        
        # Database score (peso 20%)
        if "error" not in result.database_analysis:
            db_score = min(result.database_analysis.get("total_models", 0) * 2, 10)
            scores.append(db_score)
            weights.append(0.2)
        
        # API score (peso 25%)
        if "error" not in result.api_analysis:
            api_score = min(result.api_analysis.get("total_endpoints", 0) * 0.3, 10)
            if result.api_analysis.get("uses_openapi", False):
                api_score += 2
            scores.append(min(api_score, 10))
            weights.append(0.25)
        
        # Frontend score (peso 25%)
        if "error" not in result.frontend_analysis:
            frontend_score = min(result.frontend_analysis.get("total_components", 0) * 0.2, 8)
            if result.frontend_analysis.get("typescript_usage", False):
                frontend_score += 2
            scores.append(min(frontend_score, 10))
            weights.append(0.25)
        
        # Security score (peso 30%)
        security_score = result.security_analysis.get("security_score", 0) / 10
        if "error" not in result.security_analysis:
            scores.append(security_score)
            weights.append(0.3)
        
        # Calcular promedio ponderado
        if scores and weights:
            metrics.overall_architecture_score = sum(s * w for s, w in zip(scores, weights)) / sum(weights)
        
        # Otras m√©tricas
        metrics.maintainability_score = result.pattern_analysis.get("maintainability_score", 5.0)
        metrics.security_score = security_score
        metrics.consistency_score = result.pattern_analysis.get("consistency_score", 5.0)
    
    def _generate_spanish_report(self, result: DiscoveryResult) -> str:
        """Genera reporte completo en espa√±ol"""
        report_lines = []
        
        # Header
        report_lines.append("üèóÔ∏è **An√°lisis de Arquitectura - Proyecto Semilla**")
        report_lines.append("=" * 55)
        report_lines.append("")
        report_lines.append(f"üìÖ Fecha: {result.timestamp}")
        report_lines.append(f"üìÅ Proyecto: {result.project_path}")
        report_lines.append(f"‚è±Ô∏è  Duraci√≥n: {result.metrics.duration_seconds:.1f} segundos")
        report_lines.append("")
        
        # Resumen Ejecutivo
        summary = result.architecture_summary
        report_lines.append("## üìã Resumen Ejecutivo")
        report_lines.append("")
        report_lines.append(f"**Tipo de Arquitectura:** {summary.get('architecture_type', 'Unknown')}")
        report_lines.append(f"**Nivel de Complejidad:** {summary.get('complexity_level', 'Unknown')}")
        report_lines.append(f"**Nivel de Madurez:** {summary.get('maturity_level', 'Unknown')}")
        report_lines.append(f"**Score General:** {result.metrics.overall_architecture_score:.1f}/10")
        report_lines.append("")
        
        # Stack Tecnol√≥gico
        tech_stack = summary.get("technology_stack", {})
        report_lines.append("## üíª Stack Tecnol√≥gico")
        report_lines.append("")
        for component, technology in tech_stack.items():
            report_lines.append(f"- **{component.title()}:** {technology}")
        report_lines.append("")
        
        # An√°lisis por Capas
        report_lines.append("## üèõÔ∏è An√°lisis por Capas")
        report_lines.append("")
        
        # Base de Datos
        if "error" not in result.database_analysis:
            report_lines.append("### üìä **Capa de Base de Datos**")
            
            if result.database_analysis.get("multi_tenant", False):
                report_lines.append("- ‚úÖ Arquitectura multi-tenant con RLS")
            
            if result.database_analysis.get("uses_uuid", False):
                report_lines.append("- ‚úÖ Patr√≥n UUID para claves primarias")
            
            models_count = result.database_analysis.get("total_models", 0)
            report_lines.append(f"- üìà {models_count} entidades principales detectadas")
            
            if result.database_analysis.get("has_relationships", False):
                report_lines.append("- üîó Relaciones: One-to-many, many-to-many consistentes")
            
            report_lines.append("")
        
        # API
        if "error" not in result.api_analysis:
            report_lines.append("### üîå **Capa de API**")
            
            if result.api_analysis.get("uses_openapi", False):
                report_lines.append("- ‚úÖ FastAPI con generaci√≥n autom√°tica OpenAPI")
            
            auth_type = result.api_analysis.get("auth_type", "")
            if auth_type:
                report_lines.append(f"- üîê Autenticaci√≥n {auth_type} con permisos basados en roles")
            
            endpoints_count = result.api_analysis.get("total_endpoints", 0)
            if endpoints_count > 0:
                report_lines.append(f"- üìä {endpoints_count} endpoints RESTful")
            
            api_version = result.api_analysis.get("api_version", "")
            if api_version:
                report_lines.append(f"- üè∑Ô∏è  Versionado API: {api_version}")
            
            report_lines.append("")
        
        # Frontend
        if "error" not in result.frontend_analysis:
            report_lines.append("### üé® **Capa Frontend**")
            
            framework = result.frontend_analysis.get("framework", "")
            if framework:
                typescript_suffix = " con TypeScript" if result.frontend_analysis.get("typescript_usage") else ""
                report_lines.append(f"- ‚öõÔ∏è {framework}{typescript_suffix}")
            
            report_lines.append("- üß± Arquitectura basada en componentes")
            
            styling = result.frontend_analysis.get("styling_approach", "")
            if styling:
                styling_map = {
                    "tailwind": "Tailwind CSS para estilos",
                    "css-modules": "CSS Modules para estilos", 
                    "styled-components": "Styled Components para estilos",
                    "css": "CSS tradicional para estilos"
                }
                report_lines.append(f"- üé® {styling_map.get(styling, styling)}")
            
            state_mgmt = result.frontend_analysis.get("state_management", [])
            if state_mgmt:
                mgmt_text = " y ".join(state_mgmt)
                report_lines.append(f"- üîÑ Gesti√≥n de estado con {mgmt_text}")
            else:
                report_lines.append("- üîÑ Gesti√≥n de estado con Context API")
            
            components_count = result.frontend_analysis.get("total_components", 0)
            pages_count = result.frontend_analysis.get("total_pages", 0)
            report_lines.append(f"- üìä {pages_count} p√°ginas, {components_count} componentes")
            
            report_lines.append("")
        
        # Seguridad
        if "error" not in result.security_analysis:
            report_lines.append("### üîí **Modelo de Seguridad**")
            
            if result.security_analysis.get("uses_rls", False):
                report_lines.append("- üõ°Ô∏è  Row-Level Security (RLS) para aislamiento de tenants")
            
            if result.security_analysis.get("uses_jwt", False):
                if result.security_analysis.get("uses_refresh_tokens", False):
                    report_lines.append("- üé´ Tokens JWT con mecanismo de refresh")
                else:
                    report_lines.append("- üé´ Autenticaci√≥n con tokens JWT")
            
            if result.security_analysis.get("uses_rbac", False):
                report_lines.append("- üë• Control de acceso basado en roles (RBAC)")
            
            if result.security_analysis.get("uses_cors", False):
                report_lines.append("- üåê Configuraci√≥n CORS para frontend")
            
            security_score = result.security_analysis.get("security_score", 0)
            roles_count = result.security_analysis.get("total_roles", 0)
            policies_count = result.security_analysis.get("total_rls_policies", 0)
            
            if roles_count > 0:
                report_lines.append(f"- üìä {roles_count} roles definidos")
            if policies_count > 0:
                report_lines.append(f"- üìã {policies_count} pol√≠ticas de seguridad")
            
            report_lines.append(f"- üèÜ Score de seguridad: {security_score}/100")
            report_lines.append("")
        
        # Patrones Detectados
        if "error" not in result.pattern_analysis:
            patterns_count = result.pattern_analysis.get("patterns_detected", 0)
            if patterns_count > 0:
                report_lines.append("### üß† **Patrones Arquitect√≥nicos Detectados**")
                
                top_patterns = result.pattern_analysis.get("top_patterns", [])
                for pattern in top_patterns[:5]:
                    confidence = pattern.get("confidence", 0) * 100
                    pattern_name = pattern.get("name", "Unknown")
                    report_lines.append(f"- üéØ {pattern_name} (confianza: {confidence:.0f}%)")
                
                report_lines.append("")
        
        # Insights de Integraci√≥n
        if result.integration_insights:
            report_lines.append("### üîó **Insights de Integraci√≥n**")
            
            for insight in result.integration_insights[:5]:
                severity_emoji = {"info": "‚ÑπÔ∏è", "warning": "‚ö†Ô∏è", "error": "‚ùå", "critical": "üö®"}
                emoji = severity_emoji.get(insight.severity, "‚ÑπÔ∏è")
                
                report_lines.append(f"- {emoji} **{insight.title}**")
                report_lines.append(f"  {insight.description}")
                if insight.recommendation:
                    report_lines.append(f"  üí° *{insight.recommendation}*")
            
            report_lines.append("")
        
        # Recomendaciones Principales
        all_recommendations = result.cross_component_recommendations
        
        if result.pattern_analysis and "top_recommendations" in result.pattern_analysis:
            pattern_recs = result.pattern_analysis["top_recommendations"]
            for rec in pattern_recs[:3]:
                all_recommendations.append(rec.get("title", ""))
        
        if all_recommendations:
            report_lines.append("## üí° **Recomendaciones para nuevos m√≥dulos**")
            
            unique_recs = list(dict.fromkeys(all_recommendations))[:8]  # Eliminar duplicados
            
            for rec in unique_recs:
                if rec:  # No mostrar recomendaciones vac√≠as
                    report_lines.append(f"- {rec}")
            
            report_lines.append("")
        
        # M√©tricas de Calidad
        report_lines.append("## üìä **M√©tricas de Calidad**")
        report_lines.append("")
        report_lines.append(f"- **Arquitectura General:** {result.metrics.overall_architecture_score:.1f}/10")
        report_lines.append(f"- **Mantenibilidad:** {result.metrics.maintainability_score:.1f}/10")
        report_lines.append(f"- **Seguridad:** {result.metrics.security_score:.1f}/10")
        report_lines.append(f"- **Consistencia:** {result.metrics.consistency_score:.1f}/10")
        report_lines.append("")
        
        # Estad√≠sticas del An√°lisis
        report_lines.append("## üîç **Estad√≠sticas del An√°lisis**")
        report_lines.append("")
        report_lines.append(f"- **Modelos analizados:** {result.metrics.database_models_found}")
        report_lines.append(f"- **Endpoints encontrados:** {result.metrics.api_endpoints_found}")
        report_lines.append(f"- **Componentes detectados:** {result.metrics.frontend_components_found}")
        report_lines.append(f"- **Pol√≠ticas de seguridad:** {result.metrics.security_policies_found}")
        report_lines.append(f"- **Patrones identificados:** {result.metrics.patterns_detected}")
        
        if result.metrics.errors_encountered > 0:
            report_lines.append(f"- **Errores encontrados:** {result.metrics.errors_encountered}")
        
        report_lines.append("")
        
        # Footer
        report_lines.append("---")
        report_lines.append("ü§ñ *Generado por Architecture Discovery Engine v1.0.0*")
        report_lines.append("üß† *Vibecoding Expert System - An√°lisis Inteligente de Arquitectura en Espa√±ol*")
        
        return "\n".join(report_lines)
    
    def _generate_english_report(self, result: DiscoveryResult) -> str:
        """Genera reporte en ingl√©s (versi√≥n simplificada)"""
        # Cambiar temporalmente el idioma
        original_locale = self.i18n.current_locale
        self.i18n.set_locale("en")
        
        try:
            report_lines = []
            
            report_lines.append("üèóÔ∏è **Architecture Analysis - Proyecto Semilla**")
            report_lines.append("=" * 50)
            report_lines.append("")
            report_lines.append(f"üìÖ Date: {result.timestamp}")
            report_lines.append(f"üìÅ Project: {result.project_path}")
            report_lines.append(f"‚è±Ô∏è  Duration: {result.metrics.duration_seconds:.1f} seconds")
            report_lines.append("")
            
            # Executive Summary
            summary = result.architecture_summary
            report_lines.append("## üìã Executive Summary")
            report_lines.append("")
            report_lines.append(f"**Architecture Type:** {summary.get('architecture_type', 'Unknown')}")
            report_lines.append(f"**Complexity Level:** {summary.get('complexity_level', 'Unknown')}")
            report_lines.append(f"**Maturity Level:** {summary.get('maturity_level', 'Unknown')}")
            report_lines.append(f"**Overall Score:** {result.metrics.overall_architecture_score:.1f}/10")
            report_lines.append("")
            
            # Technology Stack
            tech_stack = summary.get("technology_stack", {})
            report_lines.append("## üíª Technology Stack")
            report_lines.append("")
            for component, technology in tech_stack.items():
                report_lines.append(f"- **{component.title()}:** {technology}")
            report_lines.append("")
            
            # Key Metrics
            report_lines.append("## üìä Key Metrics")
            report_lines.append("")
            metrics = summary.get("key_metrics", {})
            report_lines.append(f"- **Database Models:** {metrics.get('total_models', 0)}")
            report_lines.append(f"- **API Endpoints:** {metrics.get('total_endpoints', 0)}")
            report_lines.append(f"- **Frontend Components:** {metrics.get('total_components', 0)}")
            report_lines.append(f"- **Security Score:** {metrics.get('security_score', 0)}/100")
            report_lines.append(f"- **Patterns Detected:** {metrics.get('patterns_detected', 0)}")
            report_lines.append("")
            
            # Recommendations
            if result.cross_component_recommendations:
                report_lines.append("## üí° Key Recommendations")
                report_lines.append("")
                for rec in result.cross_component_recommendations[:5]:
                    report_lines.append(f"- {rec}")
                report_lines.append("")
            
            # Footer
            report_lines.append("---")
            report_lines.append("ü§ñ *Generated by Architecture Discovery Engine v1.0.0*")
            
            return "\n".join(report_lines)
            
        finally:
            # Restaurar idioma original
            self.i18n.set_locale(original_locale)
    
    def _generate_json_summary(self, result: DiscoveryResult) -> Dict[str, Any]:
        """Genera resumen en formato JSON para integraci√≥n con otros sistemas"""
        return {
            "metadata": {
                "project_path": result.project_path,
                "timestamp": result.timestamp,
                "discovery_version": result.discovery_version,
                "duration_seconds": result.metrics.duration_seconds,
                "locale": self.locale
            },
            "architecture_summary": result.architecture_summary,
            "component_analysis": {
                "database": result.database_analysis,
                "api": result.api_analysis,
                "frontend": result.frontend_analysis,
                "security": result.security_analysis,
                "patterns": result.pattern_analysis
            },
            "integration": {
                "insights": [
                    {
                        "type": insight.type,
                        "severity": insight.severity,
                        "title": insight.title,
                        "description": insight.description
                    }
                    for insight in result.integration_insights
                ],
                "cross_recommendations": result.cross_component_recommendations
            },
            "metrics": {
                "overall_architecture_score": result.metrics.overall_architecture_score,
                "maintainability_score": result.metrics.maintainability_score,
                "security_score": result.metrics.security_score,
                "consistency_score": result.metrics.consistency_score,
                "files_analyzed": result.metrics.files_analyzed,
                "errors_encountered": result.metrics.errors_encountered
            }
        }
    
    def save_results(self, output_path: str, formats: List[str] = None) -> Dict[str, str]:
        """
        Guarda los resultados del an√°lisis en diferentes formatos.
        
        Args:
            output_path: Directorio donde guardar los archivos
            formats: Lista de formatos ('json', 'md', 'txt'). Por defecto todos.
            
        Returns:
            Diccionario con rutas de archivos generados
            
        Raises:
            RuntimeError: Si no hay an√°lisis previo
        """
        if not self.current_analysis:
            raise RuntimeError("No hay an√°lisis para guardar. Ejecute discover_architecture() primero.")
        
        if formats is None:
            formats = ['json', 'md', 'txt']
        
        output_path = Path(output_path)
        output_path.mkdir(parents=True, exist_ok=True)
        
        generated_files = {}
        
        # JSON Summary
        if 'json' in formats:
            json_path = output_path / "architecture_analysis.json"
            with open(json_path, 'w', encoding='utf-8') as f:
                json.dump(self.current_analysis.json_summary, f, indent=2, ensure_ascii=False)
            generated_files['json'] = str(json_path)
        
        # Markdown Report
        if 'md' in formats:
            md_path = output_path / "architecture_report.md"
            with open(md_path, 'w', encoding='utf-8') as f:
                f.write(self.current_analysis.spanish_report)
            generated_files['md'] = str(md_path)
            
            # English report if available
            if self.current_analysis.english_report:
                md_en_path = output_path / "architecture_report_en.md"
                with open(md_en_path, 'w', encoding='utf-8') as f:
                    f.write(self.current_analysis.english_report)
                generated_files['md_en'] = str(md_en_path)
        
        # Text Report
        if 'txt' in formats:
            txt_path = output_path / "architecture_summary.txt"
            # Convertir markdown a texto plano b√°sico
            plain_text = self.current_analysis.spanish_report.replace('**', '').replace('##', '').replace('#', '')
            with open(txt_path, 'w', encoding='utf-8') as f:
                f.write(plain_text)
            generated_files['txt'] = str(txt_path)
        
        logger.info(f"Resultados guardados en: {output_path}")
        return generated_files
    
    def get_current_analysis(self) -> Optional[DiscoveryResult]:
        """Retorna el an√°lisis actual si existe"""
        return self.current_analysis
    
    def clear_analysis(self):
        """Limpia el an√°lisis actual"""
        self.current_analysis = None
        logger.info("An√°lisis actual limpiado")


# Funci√≥n de conveniencia para uso r√°pido
def discover_project_architecture(project_path: str, 
                                locale: str = "es",
                                verbose: bool = True,
                                save_to: Optional[str] = None) -> DiscoveryResult:
    """
    Funci√≥n de conveniencia para analizar r√°pidamente la arquitectura de un proyecto.
    
    Args:
        project_path: Ruta al proyecto
        locale: Idioma para reportes ('es' o 'en')
        verbose: Si mostrar progreso detallado
        save_to: Directorio donde guardar resultados (opcional)
        
    Returns:
        Resultado completo del an√°lisis
    """
    engine = DiscoveryEngine(locale=locale)
    
    result = engine.discover_architecture(
        project_path=project_path,
        verbose=verbose
    )
    
    if save_to:
        engine.save_results(save_to)
        print(f"üìÅ Resultados guardados en: {save_to}")
    
    return result


if __name__ == "__main__":
    # Ejemplo de uso
    import sys
    
    if len(sys.argv) > 1:
        project_path = sys.argv[1]
    else:
        project_path = "/Users/untalcamilomedina/Documents/GitHub/proyecto-semilla"
    
    print("üöÄ Iniciando Architecture Discovery Engine...")
    print(f"üìÅ Analizando: {project_path}")
    
    try:
        result = discover_project_architecture(
            project_path=project_path,
            locale="es",
            verbose=True,
            save_to="./discovery_results"
        )
        
        print("\n" + "="*60)
        print("üìã REPORTE COMPLETO")
        print("="*60)
        print(result.spanish_report)
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        sys.exit(1)