{
  "analysis": {
    "starting": "🔍 Analizando arquitectura del proyecto...",
    "completed": "✅ Análisis de arquitectura completado",
    "failed": "❌ Error durante el análisis de arquitectura",
    "title": "🏗️ **Análisis de Arquitectura - Proyecto Semilla**"
  },
  "database": {
    "title": "📊 **Capa de Base de Datos**",
    "analyzing": "📊 Esquema de base de datos detectado",
    "multitenant": "Arquitectura multi-tenant con RLS",
    "uuid_pattern": "Patrón UUID para claves primarias",
    "entities": "{count} entidades principales detectadas",
    "relationships": "Relaciones: {types} consistentes",
    "rls_detected": "Row-Level Security (RLS) implementado",
    "policies": "{count} políticas RLS encontradas"
  },
  "api": {
    "title": "🔌 **Capa de API**",
    "analyzing": "🔌 Patrones de API identificados",
    "fastapi": "FastAPI con generación automática OpenAPI",
    "repository": "Patrón Repository utilizado consistentemente",
    "auth": "Autenticación JWT con permisos basados en roles",
    "endpoints": "Endpoints RESTful siguiendo patrón /api/v1/{resource}",
    "routes": "{count} rutas encontradas",
    "middleware": "Middleware de {types} configurado"
  },
  "frontend": {
    "title": "🎨 **Capa Frontend**", 
    "analyzing": "🎨 Arquitectura frontend analizada",
    "react": "React con TypeScript",
    "components": "Arquitectura basada en componentes",
    "styling": "Tailwind CSS para estilos",
    "state": "Gestión de estado con Context API",
    "pages": "{count} páginas encontradas",
    "components_count": "{count} componentes detectados"
  },
  "security": {
    "title": "🔒 **Modelo de Seguridad**",
    "analyzing": "🔒 Modelo de seguridad analizado",
    "rls": "Row-Level Security (RLS) para aislamiento de tenants",
    "jwt": "Tokens JWT con mecanismo de refresh",
    "rbac": "Control de acceso basado en roles (RBAC)",
    "api_keys": "Soporte para autenticación con API keys",
    "policies": "{count} políticas de seguridad encontradas",
    "roles": "{count} roles definidos"
  },
  "recommendations": {
    "title": "💡 **Recomendaciones para nuevos módulos**",
    "user_tenant_role": "Utilizar patrón User-Tenant-Role existente",
    "repository_pattern": "Seguir patrón Repository para acceso a datos",
    "rls_policies": "Implementar políticas RLS para multi-tenancy",
    "router_structure": "Agregar a estructura de router API existente",
    "testing": "Implementar pruebas unitarias e integración",
    "documentation": "Documentar endpoints API con OpenAPI"
  },
  "errors": {
    "file_not_found": "Archivo no encontrado: {file}",
    "invalid_path": "Ruta inválida: {path}",
    "parsing_error": "Error al parsear archivo: {file}",
    "database_connection": "Error de conexión a base de datos",
    "missing_dependency": "Dependencia faltante: {dependency}"
  },
  "patterns": {
    "detected": "Patrón detectado: {pattern}",
    "recommended": "Patrón recomendado: {pattern}",
    "inconsistent": "Inconsistencia detectada en: {area}",
    "best_practice": "Buena práctica identificada: {practice}"
  }
}