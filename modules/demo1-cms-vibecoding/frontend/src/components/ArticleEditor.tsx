// Article Editor Component - Generated by Vibecoding
import React, { useState, useEffect, useRef } from 'react';
import { Article, ArticleFormData, Category } from '../types';
import Button from './ui/Button';

interface ArticleEditorProps {
  article?: Article;
  categories: Category[];
  onSave: (data: ArticleFormData) => Promise<void>;
  onPublish: (data: ArticleFormData) => Promise<void>;
  onPreview: (data: ArticleFormData) => void;
  loading?: boolean;
}

const ArticleEditor: React.FC<ArticleEditorProps> = ({
  article,
  categories,
  onSave,
  onPublish,
  onPreview,
  loading = false
}) => {
  const [formData, setFormData] = useState<ArticleFormData>({
    title: article?.title || '',
    content: article?.content || '',
    excerpt: article?.excerpt || '',
    category_id: article?.category_id || '',
    tags: article?.tags || [],
    seo_title: article?.seo_title || '',
    seo_description: article?.seo_description || '',
    featured_image: article?.featured_image || '',
    status: article?.status || 'draft'
  });

  const [tagInput, setTagInput] = useState('');
  const [seoScore, setSeoScore] = useState(0);
  const [wordCount, setWordCount] = useState(0);
  const [autoSaved, setAutoSaved] = useState(false);
  const editorRef = useRef<HTMLDivElement>(null);

  // Auto-save functionality
  useEffect(() => {
    const autoSaveTimer = setTimeout(() => {
      if (formData.title || formData.content) {
        handleAutoSave();
      }
    }, 30000); // Auto-save every 30 seconds

    return () => clearTimeout(autoSaveTimer);
  }, [formData]);

  // Calculate SEO score and word count
  useEffect(() => {
    calculateSeoScore();
    calculateWordCount();
  }, [formData.title, formData.content]);

  const calculateSeoScore = () => {
    let score = 0;

    // Title length (30-60 chars ideal)
    if (formData.title.length >= 30 && formData.title.length <= 60) {
      score += 25;
    } else if (formData.title.length >= 20 && formData.title.length <= 70) {
      score += 15;
    }

    // Content length (300+ words ideal)
    const words = formData.content.split(/\s+/).filter(word => word.length > 0);
    if (words.length >= 300) {
      score += 25;
    } else if (words.length >= 150) {
      score += 15;
    }

    // SEO title present
    if (formData.seo_title) {
      score += 15;
    }

    // SEO description present
    if (formData.seo_description) {
      score += 15;
    }

    // Featured image
    if (formData.featured_image) {
      score += 10;
    }

    // Category selected
    if (formData.category_id) {
      score += 10;
    }

    setSeoScore(Math.min(100, score));
  };

  const calculateWordCount = () => {
    const words = formData.content.split(/\s+/).filter(word => word.length > 0);
    setWordCount(words.length);
  };

  const handleAutoSave = async () => {
    try {
      await onSave(formData);
      setAutoSaved(true);
      setTimeout(() => setAutoSaved(false), 3000);
    } catch (error) {
      console.error('Auto-save failed:', error);
    }
  };

  const handleSave = async () => {
    try {
      await onSave(formData);
      // Show success message
    } catch (error) {
      console.error('Save failed:', error);
    }
  };

  const handlePublish = async () => {
    try {
      await onPublish({ ...formData, status: 'published' });
      // Show success message
    } catch (error) {
      console.error('Publish failed:', error);
    }
  };

  const handlePreview = () => {
    onPreview(formData);
  };

  const addTag = () => {
    if (tagInput.trim() && !formData.tags.includes(tagInput.trim())) {
      setFormData({
        ...formData,
        tags: [...formData.tags, tagInput.trim()]
      });
      setTagInput('');
    }
  };

  const removeTag = (tagToRemove: string) => {
    setFormData({
      ...formData,
      tags: formData.tags.filter(tag => tag !== tagToRemove)
    });
  };

  const insertFormatting = (format: string) => {
    // Simple text formatting for demo
    const textarea = editorRef.current?.querySelector('textarea');
    if (textarea) {
      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      const selectedText = formData.content.substring(start, end);

      let formattedText = '';
      switch (format) {
        case 'bold':
          formattedText = `**${selectedText}**`;
          break;
        case 'italic':
          formattedText = `*${selectedText}*`;
          break;
        case 'link':
          formattedText = `[${selectedText}](url)`;
          break;
        default:
          formattedText = selectedText;
      }

      const newContent = formData.content.substring(0, start) + formattedText + formData.content.substring(end);
      setFormData({ ...formData, content: newContent });
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b sticky top-0 z-10">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center space-x-4">
              <h1 className="text-2xl font-bold text-gray-900">
                {article ? 'Editar Art√≠culo' : 'Nuevo Art√≠culo'}
              </h1>
              {autoSaved && (
                <span className="text-sm text-green-600 font-medium">
                  ‚úì Auto-guardado
                </span>
              )}
            </div>
            <div className="flex items-center space-x-3">
              <Button variant="outline" onClick={handlePreview}>
                üëÅÔ∏è Vista Previa
              </Button>
              <Button variant="secondary" onClick={handleSave} loading={loading}>
                üíæ Guardar Borrador
              </Button>
              <Button variant="primary" onClick={handlePublish} loading={loading}>
                üöÄ Publicar
              </Button>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
          {/* Main Editor */}
          <div className="lg:col-span-3 space-y-6">
            {/* Title */}
            <div className="bg-white rounded-lg shadow p-6">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                T√≠tulo del Art√≠culo
              </label>
              <input
                type="text"
                value={formData.title}
                onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Escribe un t√≠tulo atractivo..."
              />
            </div>

            {/* Content Editor */}
            <div className="bg-white rounded-lg shadow">
              <div className="px-6 py-4 border-b border-gray-200">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-medium text-gray-900">Contenido</h3>
                  <div className="flex items-center space-x-2">
                    <button
                      onClick={() => insertFormatting('bold')}
                      className="p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded"
                      title="Negrita"
                    >
                      <strong>B</strong>
                    </button>
                    <button
                      onClick={() => insertFormatting('italic')}
                      className="p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded"
                      title="Cursiva"
                    >
                      <em>I</em>
                    </button>
                    <button
                      onClick={() => insertFormatting('link')}
                      className="p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded"
                      title="Enlace"
                    >
                      üîó
                    </button>
                  </div>
                </div>
              </div>
              <div className="p-6">
                <textarea
                  value={formData.content}
                  onChange={(e) => setFormData({ ...formData, content: e.target.value })}
                  rows={20}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-vertical"
                  placeholder="Escribe el contenido de tu art√≠culo aqu√≠..."
                />
              </div>
            </div>

            {/* Excerpt */}
            <div className="bg-white rounded-lg shadow p-6">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Extracto (Resumen)
              </label>
              <textarea
                value={formData.excerpt}
                onChange={(e) => setFormData({ ...formData, excerpt: e.target.value })}
                rows={3}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Escribe un resumen atractivo del art√≠culo..."
              />
              <p className="text-sm text-gray-500 mt-1">
                {formData.excerpt.length}/160 caracteres recomendados
              </p>
            </div>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* SEO Score */}
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">SEO Score</h3>
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm text-gray-600">Puntuaci√≥n</span>
                <span className={`text-lg font-semibold ${
                  seoScore >= 80 ? 'text-green-600' :
                  seoScore >= 60 ? 'text-yellow-600' : 'text-red-600'
                }`}>
                  {seoScore}/100
                </span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div
                  className={`h-2 rounded-full ${
                    seoScore >= 80 ? 'bg-green-600' :
                    seoScore >= 60 ? 'bg-yellow-600' : 'bg-red-600'
                  }`}
                  style={{ width: `${seoScore}%` }}
                ></div>
              </div>
              <div className="mt-4 text-sm text-gray-600">
                <p>üìù Palabras: {wordCount}</p>
                <p>üìè T√≠tulo: {formData.title.length} caracteres</p>
              </div>
            </div>

            {/* Category */}
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Categor√≠a</h3>
              <select
                value={formData.category_id}
                onChange={(e) => setFormData({ ...formData, category_id: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="">Seleccionar categor√≠a...</option>
                {categories.map((category) => (
                  <option key={category.id} value={category.id}>
                    {category.name}
                  </option>
                ))}
              </select>
            </div>

            {/* Tags */}
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Etiquetas</h3>
              <div className="flex flex-wrap gap-2 mb-3">
                {formData.tags.map((tag, index) => (
                  <span
                    key={index}
                    className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800"
                  >
                    {tag}
                    <button
                      onClick={() => removeTag(tag)}
                      className="ml-1 text-blue-600 hover:text-blue-800"
                    >
                      √ó
                    </button>
                  </span>
                ))}
              </div>
              <div className="flex">
                <input
                  type="text"
                  value={tagInput}
                  onChange={(e) => setTagInput(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && addTag()}
                  className="flex-1 px-3 py-2 border border-gray-300 rounded-l-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Agregar etiqueta..."
                />
                <button
                  onClick={addTag}
                  className="px-4 py-2 bg-blue-600 text-white rounded-r-md hover:bg-blue-700"
                >
                  +
                </button>
              </div>
            </div>

            {/* Featured Image */}
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Imagen Destacada</h3>
              {formData.featured_image ? (
                <div className="mb-4">
                  <img
                    src={formData.featured_image}
                    alt="Featured"
                    className="w-full h-32 object-cover rounded-md"
                  />
                </div>
              ) : (
                <div className="w-full h-32 border-2 border-dashed border-gray-300 rounded-md flex items-center justify-center mb-4">
                  <span className="text-gray-500">No hay imagen seleccionada</span>
                </div>
              )}
              <input
                type="url"
                value={formData.featured_image}
                onChange={(e) => setFormData({ ...formData, featured_image: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="URL de la imagen..."
              />
            </div>

            {/* SEO Settings */}
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Configuraci√≥n SEO</h3>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    T√≠tulo SEO
                  </label>
                  <input
                    type="text"
                    value={formData.seo_title}
                    onChange={(e) => setFormData({ ...formData, seo_title: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="T√≠tulo para motores de b√∫squeda..."
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    {(formData.seo_title || '').length}/60 caracteres
                  </p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Meta Descripci√≥n
                  </label>
                  <textarea
                    value={formData.seo_description}
                    onChange={(e) => setFormData({ ...formData, seo_description: e.target.value })}
                    rows={3}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Descripci√≥n para motores de b√∫squeda..."
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    {(formData.seo_description || '').length}/160 caracteres
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ArticleEditor;