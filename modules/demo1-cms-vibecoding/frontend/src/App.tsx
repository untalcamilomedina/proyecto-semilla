// Main App Component - Generated by Vibecoding
import React, { useState } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import Dashboard from './components/Dashboard';
import ArticleEditor from './components/ArticleEditor';
import ThemeToggle from './components/ThemeToggle';
import TestStyles from './components/TestStyles';
import Button from './components/ui/Button';
import { Article, Category, ArticleFormData } from './types';

// Mock data for demonstration
const mockCategories: Category[] = [
  {
    id: 'cat-1',
    tenant_id: 'tenant-1',
    name: 'Tutoriales',
    slug: 'tutoriales',
    description: 'Gu√≠as y tutoriales',
    color: '#10B981',
    order_index: 1,
    created_at: '2024-01-10T00:00:00Z'
  },
  {
    id: 'cat-2',
    tenant_id: 'tenant-1',
    name: 'Noticias',
    slug: 'noticias',
    description: '√öltimas noticias',
    color: '#3B82F6',
    order_index: 2,
    created_at: '2024-01-10T00:00:00Z'
  }
];

function App() {
  const [currentView, setCurrentView] = useState<'dashboard' | 'editor'>('dashboard');
  const [editingArticle, setEditingArticle] = useState<Article | undefined>();

  const handleNewArticle = () => {
    setEditingArticle(undefined);
    setCurrentView('editor');
  };

  const handleEditArticle = (article: Article) => {
    setEditingArticle(article);
    setCurrentView('editor');
  };

  const handleSaveArticle = async (data: ArticleFormData) => {
    // Mock save implementation
    console.log('Saving article:', data);
    // In real implementation, this would call the API
    await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call
  };

  const handlePublishArticle = async (data: ArticleFormData) => {
    // Mock publish implementation
    console.log('Publishing article:', data);
    // In real implementation, this would call the API
    await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call
    setCurrentView('dashboard');
  };

  const handlePreviewArticle = (data: ArticleFormData) => {
    // Mock preview implementation
    console.log('Previewing article:', data);
    // In real implementation, this would open a preview modal or page
    alert(`Vista previa:\n\nT√≠tulo: ${data.title}\n\nContenido: ${data.content.substring(0, 100)}...`);
  };

  const handleBackToDashboard = () => {
    setCurrentView('dashboard');
  };

  return (
    <Router>
      <div className="min-h-screen bg-gray-50">
        {/* Navigation Header */}
        <nav className="bg-white shadow-sm border-b">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center h-16">
              <div className="flex items-center">
                <h1 className="text-xl font-bold text-gray-900">üå± CMS Module</h1>
                <span className="ml-2 text-sm text-gray-500">Generated by Vibecoding</span>
              </div>

              <div className="flex items-center space-x-4">
                <ThemeToggle />

                {currentView === 'dashboard' ? (
                  <Button variant="primary" onClick={handleNewArticle}>
                    üìù Nuevo Art√≠culo
                  </Button>
                ) : (
                  <Button variant="outline" onClick={handleBackToDashboard}>
                    ‚Üê Volver al Dashboard
                  </Button>
                )}
              </div>
            </div>
          </div>
        </nav>

        {/* Main Content */}
        <main>
          <Routes>
            <Route
              path="/"
              element={
                currentView === 'dashboard' ? (
                  <Dashboard />
                ) : (
                  <ArticleEditor
                    article={editingArticle}
                    categories={mockCategories}
                    onSave={handleSaveArticle}
                    onPublish={handlePublishArticle}
                    onPreview={handlePreviewArticle}
                  />
                )
              }
            />
            <Route path="*" element={<Navigate to="/" replace />} />
          </Routes>
        </main>

        {/* Footer */}
        <footer className="bg-white border-t mt-16">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div className="flex justify-between items-center">
              <div className="text-sm text-gray-500">
                <p>üå± CMS Module - Generated by Vibecoding</p>
                <p>üöÄ Proyecto Semilla v0.1.0 - Primera plataforma SaaS Vibecoding-native</p>
              </div>
              <div className="flex items-center space-x-4 text-sm text-gray-500">
                <span>ü§ñ Powered by Vibecoding</span>
                <span>‚ö° Built with React + TypeScript</span>
                <span>üé® WordPress-like UX</span>
              </div>
            </div>
          </div>
        </footer>
      </div>
    </Router>
  );
}

export default App;