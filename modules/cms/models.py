"""
CMS Module Models - Generated by Vibecoding
Content Management System models for Proyecto Semilla
"""

from datetime import datetime
from typing import List, Optional
from uuid import uuid4

from sqlalchemy import Boolean, Column, DateTime, Integer, String, Text, UUID, ForeignKey, Index, text
from sqlalchemy.orm import relationship
from sqlalchemy.dialects.postgresql import ARRAY

from app.core.database import Base


class CMSArticle(Base):
    """
    Article model for CMS content
    Generated automatically by Vibecoding system
    """
    __tablename__ = "cms_articles"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    tenant_id = Column(UUID(as_uuid=True), nullable=False, index=True)

    # Content fields
    title = Column(String(200), nullable=False)
    slug = Column(String(200), nullable=False, unique=True, index=True)
    content = Column(Text)
    excerpt = Column(Text)

    # Status and workflow
    status = Column(String(20), nullable=False, default="draft", index=True)  # draft, review, published

    # Relationships
    author_id = Column(UUID(as_uuid=True), nullable=False)
    category_id = Column(UUID(as_uuid=True), nullable=True)

    # Metadata
    tags = Column(ARRAY(String), default=list)
    seo_title = Column(String(60))
    seo_description = Column(String(160))
    featured_image = Column(String(500))

    # Timestamps
    published_at = Column(DateTime(timezone=True), nullable=True, index=True)
    created_at = Column(DateTime(timezone=True), nullable=False, default=datetime.utcnow)
    updated_at = Column(DateTime(timezone=True), nullable=False, default=datetime.utcnow, onupdate=datetime.utcnow)

    # Relationships
    category = relationship("CMSCategory", back_populates="articles")
    comments = relationship("CMSComment", back_populates="article", cascade="all, delete-orphan")

    def __repr__(self):
        return f"<CMSArticle(id={self.id}, title='{self.title}', status='{self.status}')>"


class CMSCategory(Base):
    """
    Category model for organizing CMS content
    Supports hierarchical structure
    """
    __tablename__ = "cms_categories"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    tenant_id = Column(UUID(as_uuid=True), nullable=False, index=True)

    # Category info
    name = Column(String(100), nullable=False)
    slug = Column(String(100), nullable=False, unique=True, index=True)
    description = Column(Text)

    # Hierarchy support
    parent_id = Column(UUID(as_uuid=True), nullable=True)

    # UI customization
    color = Column(String(7), nullable=False, default="#10B981")
    order_index = Column(Integer, nullable=False, default=0)

    # Timestamps
    created_at = Column(DateTime(timezone=True), nullable=False, default=datetime.utcnow)

    # Relationships
    articles = relationship("CMSArticle", back_populates="category")
    parent = relationship("CMSCategory", remote_side=[id], backref="children")

    def __repr__(self):
        return f"<CMSCategory(id={self.id}, name='{self.name}', slug='{self.slug}')>"


class CMSComment(Base):
    """
    Comment model for article discussions
    Supports nested comments (threads)
    """
    __tablename__ = "cms_comments"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    article_id = Column(UUID(as_uuid=True), ForeignKey("cms_articles.id"), nullable=False, index=True)

    # Comment content
    content = Column(Text, nullable=False)

    # Author info (optional for anonymous comments)
    author_name = Column(String(100))
    author_email = Column(String(255))

    # Thread support
    parent_id = Column(UUID(as_uuid=True), nullable=True)

    # Moderation
    status = Column(String(20), nullable=False, default="pending", index=True)  # pending, approved, rejected

    # Timestamps
    created_at = Column(DateTime(timezone=True), nullable=False, default=datetime.utcnow)

    # Relationships
    article = relationship("CMSArticle", back_populates="comments")
    replies = relationship("CMSComment", backref="parent", remote_side=[id])

    def __repr__(self):
        return f"<CMSComment(id={self.id}, article_id={self.article_id}, status='{self.status}')>"


class CMSMedia(Base):
    """
    Media file model for CMS uploads
    Supports images, documents, videos
    """
    __tablename__ = "cms_media"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    tenant_id = Column(UUID(as_uuid=True), nullable=False, index=True)

    # File info
    filename = Column(String(255), nullable=False)
    original_name = Column(String(255), nullable=False)
    mime_type = Column(String(100))
    file_size = Column(Integer)
    file_path = Column(String(500))

    # SEO and accessibility
    alt_text = Column(String(255))

    # Upload info
    uploaded_by = Column(UUID(as_uuid=True), nullable=False)

    # Timestamps
    created_at = Column(DateTime(timezone=True), nullable=False, default=datetime.utcnow)

    def __repr__(self):
        return f"<CMSMedia(id={self.id}, filename='{self.filename}', mime_type='{self.mime_type}')>"


# Additional indexes for performance
Index('idx_cms_articles_tenant_status', CMSArticle.tenant_id, CMSArticle.status)
Index('idx_cms_articles_tenant_published', CMSArticle.tenant_id, CMSArticle.published_at)
Index('idx_cms_categories_tenant_order', CMSCategory.tenant_id, CMSCategory.order_index)
Index('idx_cms_comments_article_status', CMSComment.article_id, CMSComment.status)


# Full-text search setup (would be created via migration)
"""
-- Full-text search index for articles (to be added in migration)
CREATE INDEX idx_cms_articles_search ON cms_articles
USING gin(to_tsvector('spanish', title || ' ' || coalesce(content, '')));

-- Function to search articles
CREATE OR REPLACE FUNCTION cms_search_articles(
    search_query text,
    tenant_uuid uuid,
    limit_count int DEFAULT 10
)
RETURNS TABLE (
    id uuid,
    title text,
    excerpt text,
    score real
)
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY
    SELECT
        a.id,
        a.title,
        left(coalesce(a.excerpt, a.content), 200) as excerpt,
        ts_rank(to_tsvector('spanish', a.title || ' ' || coalesce(a.content, '')), plainto_tsquery('spanish', search_query)) as score
    FROM cms_articles a
    WHERE a.tenant_id = tenant_uuid
      AND a.status = 'published'
      AND to_tsvector('spanish', a.title || ' ' || coalesce(a.content, '')) @@ plainto_tsquery('spanish', search_query)
    ORDER BY score DESC
    LIMIT limit_count;
END;
$$;
"""