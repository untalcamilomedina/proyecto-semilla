// CMS Frontend Types - Generated by Vibecoding

export interface User {
  id: string;
  email: string;
  first_name: string;
  last_name: string;
  full_name: string;
  is_active: boolean;
  is_verified: boolean;
  tenant_id: string;
  role_ids: string[];
  created_at: string;
  updated_at: string;
}

export interface Tenant {
  id: string;
  name: string;
  slug: string;
  description?: string;
  parent_tenant_id?: string;
  settings: Record<string, any>;
  is_active: boolean;
  created_at: string;
  updated_at: string;
}

export interface Article {
  id: string;
  tenant_id: string;
  title: string;
  slug: string;
  content: string;
  excerpt: string;
  status: 'draft' | 'review' | 'published';
  author_id: string;
  category_id?: string;
  tags: string[];
  seo_title?: string;
  seo_description?: string;
  featured_image?: string;
  published_at?: string;
  created_at: string;
  updated_at: string;
  author?: User;
  category?: Category;
}

export interface Category {
  id: string;
  tenant_id: string;
  name: string;
  slug: string;
  description?: string;
  parent_id?: string;
  color: string;
  order_index: number;
  created_at: string;
  children?: Category[];
}

export interface Comment {
  id: string;
  article_id: string;
  content: string;
  author_name?: string;
  author_email?: string;
  parent_id?: string;
  status: 'pending' | 'approved' | 'rejected';
  created_at: string;
  replies?: Comment[];
}

export interface MediaFile {
  id: string;
  tenant_id: string;
  filename: string;
  original_name: string;
  mime_type: string;
  file_size: number;
  file_path: string;
  alt_text?: string;
  uploaded_by: string;
  created_at: string;
}

export interface DashboardStats {
  total_articles: number;
  published_articles: number;
  draft_articles: number;
  total_views: number;
  total_comments: number;
  popular_categories: Array<{
    name: string;
    count: number;
  }>;
  recent_activity: Array<{
    type: 'article_published' | 'article_created' | 'comment_added';
    title: string;
    timestamp: string;
  }>;
}

export interface SEOAnalysis {
  seo_score: number;
  title_length: number;
  content_length: number;
  recommendations: string[];
  meta_title_suggestion: string;
  meta_description_suggestion: string;
  keyword_suggestions: string[];
}

// Form Types
export interface ArticleFormData {
  title: string;
  content: string;
  excerpt: string;
  category_id?: string;
  tags: string[];
  seo_title?: string;
  seo_description?: string;
  featured_image?: string;
  status: 'draft' | 'review' | 'published';
}

export interface CategoryFormData {
  name: string;
  slug: string;
  description?: string;
  parent_id?: string;
  color: string;
}

export interface CommentFormData {
  content: string;
  author_name?: string;
  author_email?: string;
  parent_id?: string;
}

// API Response Types
export interface ApiResponse<T> {
  data: T;
  message?: string;
  success: boolean;
}

export interface PaginatedResponse<T> {
  items: T[];
  total: number;
  page: number;
  page_size: number;
  total_pages: number;
}

// Theme Types
export type Theme = 'light' | 'dark';

export interface ThemeConfig {
  primary: string;
  secondary: string;
  accent: string;
  background: string;
  foreground: string;
  muted: string;
  border: string;
}

// Component Props Types
export interface BaseComponentProps {
  className?: string;
  children?: any;
}

export interface ModalProps extends BaseComponentProps {
  isOpen: boolean;
  onClose: () => void;
  title?: string;
  size?: 'sm' | 'md' | 'lg' | 'xl';
}

export interface ButtonProps extends BaseComponentProps {
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'danger';
  size?: 'sm' | 'md' | 'lg';
  disabled?: boolean;
  loading?: boolean;
  onClick?: () => void;
  type?: 'button' | 'submit' | 'reset';
}

export interface InputProps extends BaseComponentProps {
  type?: string;
  placeholder?: string;
  value?: string;
  onChange?: (value: string) => void;
  error?: string;
  required?: boolean;
  disabled?: boolean;
}

// Editor Types
export interface EditorProps extends BaseComponentProps {
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  readonly?: boolean;
  toolbar?: string[];
}

// Table Types
export interface TableColumn<T> {
  key: keyof T;
  title: string;
  sortable?: boolean;
  render?: (value: any, record: T) => any;
}

export interface TableProps<T> {
  data: T[];
  columns: TableColumn<T>[];
  loading?: boolean;
  pagination?: {
    current: number;
    total: number;
    pageSize: number;
    onChange: (page: number) => void;
  };
  onRowClick?: (record: T) => void;
}

// Notification Types
export interface NotificationItem {
  id: string;
  type: 'success' | 'error' | 'warning' | 'info';
  title: string;
  message?: string;
  duration?: number;
  action?: {
    label: string;
    onClick: () => void;
  };
}

// Search Types
export interface SearchFilters {
  query?: string;
  status?: string[];
  category_id?: string;
  author_id?: string;
  date_from?: string;
  date_to?: string;
  tags?: string[];
}

export interface SearchResult {
  id: string;
  title: string;
  excerpt: string;
  type: 'article' | 'category' | 'media';
  url: string;
  score: number;
  highlights?: string[];
}

// Upload Types
export interface UploadProgress {
  loaded: number;
  total: number;
  percentage: number;
}

export interface FileUploadResult {
  file: MediaFile;
  url: string;
  thumbnail?: string;
}