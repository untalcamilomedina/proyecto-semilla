services:
  # Base de datos PostgreSQL con RLS
  db:
    image: postgres:15-alpine
    container_name: proyecto_semilla_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: proyecto_semilla
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d proyecto_semilla"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - proyecto_semilla_network

  # Redis para cache y sesiones
  redis:
    image: redis:7-alpine
    container_name: proyecto_semilla_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - proyecto_semilla_network

  # Backend FastAPI
  backend:
    build:
      context: .
      dockerfile: ./docker/backend/Dockerfile
    container_name: proyecto_semilla_backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://admin:${DB_PASSWORD:-changeme123}@db:5432/proyecto_semilla?sslmode=disable
      DB_PASSWORD: ${DB_PASSWORD:-changeme123}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-xO5kjaG4nj0WOaDYezPI/ArMQTFYIlS7Chz3WRnAmvo=}
      BACKEND_CORS_ORIGINS: '["http://localhost:3000", "http://frontend:3000"]'
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      COOKIE_SECURE: ${COOKIE_SECURE:-false}
      COOKIE_DOMAIN: ${COOKIE_DOMAIN:-}
      COOKIE_SAME_SITE: ${COOKIE_SAME_SITE:-lax}
      SEED_ADMIN_PASSWORD: ${SEED_ADMIN_PASSWORD:-admin123}
      SEED_DEMO_PASSWORD: ${SEED_DEMO_PASSWORD:-demo123}
    volumes:
      - ./backend:/app
      - ./tests:/app/tests
      - ./pytest.ini:/app/pytest.ini
      - ./scripts:/app/scripts
      - /app/__pycache__
    ports:
      - "7777:8000"
    command: /bin/sh -c "alembic upgrade head && python -m app.initial_data && uvicorn app.main:app --host 0.0.0.0 --port 8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - proyecto_semilla_network

  # MCP Server
  mcp_server:
    build:
      context: .
      dockerfile: ./docker/backend/Dockerfile # Use backend's Dockerfile as it has mcp installed
    container_name: proyecto_semilla_mcp_server
    restart: unless-stopped
    command: python run_mcp_server.py # Command to run the MCP server script
    volumes:
      - ./backend:/app # Mount backend code to access run_mcp_server.py
    ports:
      - "8001:8001"
    networks:
      - proyecto_semilla_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/docs"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      backend:
        condition: service_healthy # MCP server depends on backend being healthy

  # Frontend Next.js
  frontend:
    build:
      context: .
      dockerfile: ./docker/frontend/Dockerfile
    container_name: proyecto_semilla_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - proyecto_semilla_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
  redis_data:

networks:
  proyecto_semilla_network:
    driver: bridge