#!/bin/bash

# DAILY REALITY CHECK - Proyecto Semilla
# Ejecutar ANTES de cualquier trabajo de desarrollo

echo "üîç DAILY REALITY CHECK - $(date)"
echo "=================================="

# Variables de control
DOCKER_STATUS=0
BACKEND_STATUS=0
FRONTEND_STATUS=0
MCP_STATUS=0
OVERALL_STATUS=0

# 1. VERIFICAR DOCKER SERVICES
echo "üì¶ Checking Docker services..."
docker-compose up -d --wait > /dev/null 2>&1
DOCKER_STATUS=$?

if [ $DOCKER_STATUS -eq 0 ]; then
    echo "‚úÖ Docker services: UP"
else
    echo "‚ùå Docker services: FAILED TO START"
    OVERALL_STATUS=1
fi

# 2. VERIFICAR BACKEND HEALTH
echo "üîß Checking Backend health..."
sleep 5  # Give backend time to start
curl -s -f http://localhost:7777/health > /dev/null 2>&1
BACKEND_STATUS=$?

if [ $BACKEND_STATUS -eq 0 ]; then
    echo "‚úÖ Backend health: HEALTHY"
else
    echo "‚ùå Backend health: UNHEALTHY (http://localhost:7777/health failed)"
    OVERALL_STATUS=1
fi

# 3. VERIFICAR MCP SERVER HEALTH
echo "üß† Checking MCP Server health..."
sleep 5 # Give MCP server time to start
curl -s -f http://localhost:8001/docs > /dev/null 2>&1
MCP_STATUS=$?

if [ $MCP_STATUS -eq 0 ]; then
    echo "‚úÖ MCP Server health: HEALTHY"
else
    echo "‚ùå MCP Server health: UNHEALTHY (http://localhost:8001/docs failed)"
    OVERALL_STATUS=1
fi

# 4. VERIFICAR FRONTEND BUILD
echo "üé® Checking Frontend compilation..."
if [ -d "frontend" ]; then
    cd frontend
    npm run build > /dev/null 2>&1
    FRONTEND_STATUS=$?
    cd ..
    
    if [ $FRONTEND_STATUS -eq 0 ]; then
        echo "‚úÖ Frontend build: SUCCESS"
    else
        echo "‚ùå Frontend build: COMPILATION ERRORS"
        OVERALL_STATUS=1
    fi
else
    echo "‚ö†Ô∏è  Frontend directory not found"
fi

# 5. CALCULAR M√âTRICAS REALES
echo "üìä Calculating real metrics..."

# Contar l√≠neas de c√≥digo reales
LINES_BACKEND=$(find backend -name "*.py" 2>/dev/null | xargs wc -l 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
LINES_FRONTEND=$(find frontend -name "*.ts" -o -name "*.tsx" 2>/dev/null | xargs wc -l 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
TOTAL_LINES=$((LINES_BACKEND + LINES_FRONTEND))

# Contar commits
COMMITS=$(git rev-list --count HEAD 2>/dev/null || echo "0")

# √öltimo commit
LAST_COMMIT=$(git log -1 --pretty=format:"%h - %s (%cr)" 2>/dev/null || echo "No commits found")

# Estado de servicios Docker
DOCKER_SERVICES=$(docker-compose ps --services 2>/dev/null | wc -l || echo "0")
DOCKER_RUNNING=$(docker-compose ps --services --filter status=running 2>/dev/null | wc -l || echo "0")

# 6. GENERAR CURRENT_STATUS.md
echo "üìù Updating CURRENT_STATUS.md..."

mkdir -p docs

cat > docs/CURRENT_STATUS.md << EOF
# üìä CURRENT STATUS - $(date)
## Auto-generated by daily-check.sh

---

## ‚úÖ SERVICE STATUS (Last checked: $(date))

| Service | Status | Details |
|---------|--------|---------|
| Docker | $([ $DOCKER_STATUS -eq 0 ] && echo "‚úÖ UP" || echo "‚ùå DOWN") | $DOCKER_RUNNING/$DOCKER_SERVICES services running |
| Backend | $([ $BACKEND_STATUS -eq 0 ] && echo "‚úÖ HEALTHY" || echo "‚ùå UNHEALTHY") | http://localhost:7777/health |
| MCP Server | $([ $MCP_STATUS -eq 0 ] && echo "‚úÖ HEALTHY" || echo "‚ùå UNHEALTHY") | http://localhost:8001/docs |
| Frontend | $([ $FRONTEND_STATUS -eq 0 ] && echo "‚úÖ BUILDS OK" || echo "‚ùå BUILD ERRORS") | npm run build status |

---

## üî¢ REAL METRICS (Auto-calculated)

| Metric | Value | Source |
|--------|-------|--------|
| **Lines of Code (Backend)** | $LINES_BACKEND | find backend -name "*.py" |
| **Lines of Code (Frontend)** | $LINES_FRONTEND | find frontend -name "*.ts*" |
| **Total Lines of Code** | $TOTAL_LINES | Combined count |
| **Git Commits** | $COMMITS | git rev-list --count HEAD |
| **Docker Services** | $DOCKER_RUNNING/$DOCKER_SERVICES | docker-compose ps |

---

## üìù GIT STATUS

**Last Commit:** $LAST_COMMIT

**Working Directory Status:**
\`\`\`
$(git status --porcelain 2>/dev/null || echo "Git not available")
\`\`\`

---

## üéØ DEVELOPMENT PRIORITIES

### ‚úÖ Working (Verified $(date))
- Backend APIs responding
- Docker environment stable
- Basic services operational

### üîß Needs Attention
$([ $OVERALL_STATUS -ne 0 ] && echo "- **CRITICAL**: Fix failing services before new development" || echo "- No critical issues detected")
$([ $DOCKER_STATUS -ne 0 ] && echo "- **HIGH**: Docker services not starting properly")
$([ $BACKEND_STATUS -ne 0 ] && echo "- **HIGH**: Backend health check failing")
$([ $MCP_STATUS -ne 0 ] && echo "- **HIGH**: MCP Server health check failing")
$([ $FRONTEND_STATUS -ne 0 ] && echo "- **MEDIUM**: Frontend compilation errors")

### üìã Next Actions (Based on current state)
- [ ] Run daily-check.sh to verify status
- [ ] Fix any failing services before new features
- [ ] Update this status after any significant changes
- [ ] Demo working functionality weekly

---

## ‚ö†Ô∏è WARNINGS

$([ $OVERALL_STATUS -ne 0 ] && echo "üö® **CRITICAL**: Basic services are not working. Priority #1 is to fix these issues." || echo "‚úÖ All basic services are operational.")

$([ $TOTAL_LINES -lt 1000 ] && echo "üìä **INFO**: Project is in early development stage ($TOTAL_LINES total LOC)")

---

*‚ö†Ô∏è This file is auto-generated by scripts/daily-check.sh*  
*Last updated: $(date)*  
*Manual edits will be overwritten - update via scripts only*

EOF

# 7. RESULTADO FINAL
echo "=================================="

if [ $OVERALL_STATUS -eq 0 ]; then
    echo "üéâ DAILY CHECK: ALL SYSTEMS OPERATIONAL"
    echo "‚úÖ Ready for development work"
else
    echo "üö® DAILY CHECK: ISSUES DETECTED"
    echo "‚ùå Fix failing services before continuing"
    echo ""
    echo "üîß TROUBLESHOOTING:"
    [ $DOCKER_STATUS -ne 0 ] && echo "   - Run: docker-compose down && docker-compose up -d"
    [ $BACKEND_STATUS -ne 0 ] && echo "   - Check: docker-compose logs backend"
    [ $MCP_STATUS -ne 0 ] && echo "   - Check: docker-compose logs mcp_server"
    [ $FRONTEND_STATUS -ne 0 ] && echo "   - Check: cd frontend && npm install && npm run build"
fi

echo ""
echo "üìä Updated docs/CURRENT_STATUS.md with real metrics"
echo "üîç Review the status file for detailed information"

exit $OVERALL_STATUS
