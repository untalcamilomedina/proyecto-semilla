#!/usr/bin/env python3
"""
Secure Setup Script for Proyecto Semilla
Interactive setup that creates secure system users instead of hardcoded ones
"""

import os
import sys
import re
import secrets
from pathlib import Path
from getpass import getpass
from typing import Dict, Any


def print_header():
    """Print setup header"""
    print("\n" + "="*60)
    print("üîê PROYECTO SEMILLA - SECURE SETUP")
    print("="*60)
    print("This setup will create secure system users instead of hardcoded ones.")
    print("All credentials will be configurable and follow security best practices.\n")


def validate_email(email: str) -> bool:
    """Validate email format"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None


def validate_password(password: str) -> tuple[bool, str]:
    """Validate password strength"""
    if len(password) < 12:
        return False, "Password must be at least 12 characters long"

    if not re.search(r'[A-Z]', password):
        return False, "Password must contain at least one uppercase letter"

    if not re.search(r'[a-z]', password):
        return False, "Password must contain at least one lowercase letter"

    if not re.search(r'\d', password):
        return False, "Password must contain at least one number"

    if not re.search(r'[!@#$%^&*(),.?":{}|<>]', password):
        return False, "Password must contain at least one special character"

    return True, "Password is strong"


def get_secure_input(prompt: str, validator=None, password=False) -> str:
    """Get validated input from user"""
    while True:
        if password:
            value = getpass(prompt)
        else:
            value = input(prompt).strip()

        if validator:
            is_valid, message = validator(value)
            if not is_valid:
                print(f"‚ùå {message}")
                continue

        if not value:
            print("‚ùå This field is required")
            continue

        return value


def setup_database_config() -> Dict[str, str]:
    """Setup database configuration"""
    print("\nüóÑÔ∏è  Database Configuration")
    print("-" * 30)

    config = {
        "DB_PASSWORD": get_secure_input(
            "Database password (for PostgreSQL): ",
            lambda x: (len(x) >= 8, "Password must be at least 8 characters"),
            password=True
        )
    }

    return config


def setup_jwt_config() -> Dict[str, str]:
    """Setup JWT configuration"""
    print("\nüîê JWT Configuration")
    print("-" * 20)

    jwt_secret = input("JWT Secret (press Enter for auto-generated): ").strip()
    if not jwt_secret:
        jwt_secret = secrets.token_urlsafe(64)
        print(f"üîë Auto-generated JWT Secret: {jwt_secret[:20]}...")

    return {"JWT_SECRET": jwt_secret}


def setup_system_admin() -> Dict[str, str]:
    """Setup system administrator"""
    print("\nüë§ System Administrator Setup")
    print("-" * 32)

    admin_config = {}

    # Email
    admin_config["SEED_ADMIN_EMAIL"] = get_secure_input(
        "Admin email: ",
        lambda x: (validate_email(x), "Invalid email format")
    )

    # Password
    admin_config["SEED_ADMIN_PASSWORD"] = get_secure_input(
        "Admin password: ",
        validate_password,
        password=True
    )

    # Names (optional)
    admin_config["SEED_ADMIN_FIRST_NAME"] = input("Admin first name (default: Super): ").strip() or "Super"
    admin_config["SEED_ADMIN_LAST_NAME"] = input("Admin last name (default: Admin): ").strip() or "Admin"

    return admin_config


def setup_demo_user() -> Dict[str, str]:
    """Setup demo user (optional)"""
    print("\nüé≠ Demo User Setup (Optional)")
    print("-" * 30)

    setup_demo = input("Setup demo user? (y/N): ").strip().lower() == 'y'

    if not setup_demo:
        print("‚ÑπÔ∏è  Demo user setup skipped")
        return {}

    demo_config = {}

    # Email
    demo_config["SEED_DEMO_EMAIL"] = get_secure_input(
        "Demo email: ",
        lambda x: (validate_email(x), "Invalid email format")
    )

    # Password
    demo_config["SEED_DEMO_PASSWORD"] = get_secure_input(
        "Demo password: ",
        validate_password,
        password=True
    )

    # Names (optional)
    demo_config["SEED_DEMO_FIRST_NAME"] = input("Demo first name (default: Demo): ").strip() or "Demo"
    demo_config["SEED_DEMO_LAST_NAME"] = input("Demo last name (default: User): ").strip() or "User"

    return demo_config


def generate_env_file(config: Dict[str, Any]) -> None:
    """Generate .env file with secure configuration"""
    print("\nüìù Generating .env file...")

    env_content = f"""# Proyecto Semilla - Secure Environment Configuration
# Generated by setup_secure.py on {os.popen('date').read().strip()}

# Database Configuration
DB_HOST=db
DB_PORT=5432
DB_NAME=proyecto_semilla
DB_PASSWORD={config["DB_PASSWORD"]}

# JWT Configuration
JWT_SECRET={config["JWT_SECRET"]}

# System Users Configuration
SEED_ADMIN_EMAIL={config["SEED_ADMIN_EMAIL"]}
SEED_ADMIN_PASSWORD={config["SEED_ADMIN_PASSWORD"]}
SEED_ADMIN_FIRST_NAME={config["SEED_ADMIN_FIRST_NAME"]}
SEED_ADMIN_LAST_NAME={config["SEED_ADMIN_LAST_NAME"]}

# Demo User Configuration
"""

    if "SEED_DEMO_EMAIL" in config:
        env_content += f"""SEED_DEMO_EMAIL={config["SEED_DEMO_EMAIL"]}
SEED_DEMO_PASSWORD={config["SEED_DEMO_PASSWORD"]}
SEED_DEMO_FIRST_NAME={config["SEED_DEMO_FIRST_NAME"]}
SEED_DEMO_LAST_NAME={config["SEED_DEMO_LAST_NAME"]}
"""

    env_content += """
# Migration Configuration
HARDCODED_USERS_MIGRATION_ENABLED=true

# Other Configuration
DEBUG=true
LOG_LEVEL=INFO
CORS_ORIGINS=http://localhost:7701,http://localhost:7777
REDIS_URL=redis://redis:6379
RATE_LIMIT_REQUESTS=100
RATE_LIMIT_WINDOW=60

# Frontend Configuration (DO NOT expose secrets here)
NEXT_PUBLIC_API_URL=http://localhost:7777
"""

    # Check if .env exists
    env_file = Path(".env")
    if env_file.exists():
        backup = input(".env file already exists. Create backup? (Y/n): ").strip().lower()
        if backup != 'n':
            backup_file = env_file.with_suffix('.env.backup')
            env_file.rename(backup_file)
            print(f"üì¶ Backup created: {backup_file}")

    # Write new .env file
    with open(env_file, 'w') as f:
        f.write(env_content)

    print(f"‚úÖ Environment file created: {env_file}")


def show_next_steps():
    """Show next steps after setup"""
    print("\n" + "="*60)
    print("üéâ SECURE SETUP COMPLETED!")
    print("="*60)
    print("\nüìã Next Steps:")
    print("1. Review the generated .env file")
    print("2. Start the services:")
    print("   docker-compose up -d db redis")
    print("3. Run database migrations:")
    print("   docker-compose run --rm backend alembic upgrade head")
    print("4. Create system users:")
    print("   python scripts/seed_secure_system_users.py")
    print("5. Start the application:")
    print("   docker-compose up -d backend frontend")
    print("\nüîê Your secure credentials:")
    print("   Admin email: <configured in .env>")
    print("   Admin password: <configured in .env>")
    if os.path.exists(".env"):
        with open(".env", "r") as f:
            content = f.read()
            if "SEED_DEMO_EMAIL" in content:
                print("   Demo email: <configured in .env>")
                print("   Demo password: <configured in .env>")
    print("\n‚ö†Ô∏è  IMPORTANT: Change passwords in production!")
    print("üîó Access the application at: http://localhost:7701")


def main():
    """Main setup function"""
    try:
        print_header()

        # Check if already configured
        if Path(".env").exists():
            with open(".env", "r") as f:
                if "HARDCODED_USERS_MIGRATION_ENABLED=true" in f.read():
                    reconfigure = input("System appears to be already configured. Reconfigure? (y/N): ").strip().lower()
                    if reconfigure != 'y':
                        print("Setup cancelled.")
                        return

        # Collect configuration
        config = {}

        # Database
        config.update(setup_database_config())

        # JWT
        config.update(setup_jwt_config())

        # System admin
        config.update(setup_system_admin())

        # Demo user (optional)
        config.update(setup_demo_user())

        # Generate .env file
        generate_env_file(config)

        # Show next steps
        show_next_steps()

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Setup cancelled by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Setup failed: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()