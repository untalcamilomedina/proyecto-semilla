#!/usr/bin/env python3
"""
Proyecto Semilla - Instalador Interactivo
Script de instalaci√≥n automatizada para configurar el entorno de desarrollo
"""

import os
import sys
import json
import subprocess
from pathlib import Path
from typing import Dict, Any, Optional


def check_dependencies():
    """Verificar que las dependencias Python necesarias est√©n instaladas"""
    print("üîç Verificando dependencias Python...")

    required_modules = [
        'alembic',  # Para migraciones de base de datos
        'secrets',  # Para generaci√≥n de secrets (incluido en Python 3.6+)
    ]

    missing_modules = []

    for module in required_modules:
        try:
            __import__(module)
            print(f"‚úÖ {module} - OK")
        except ImportError:
            missing_modules.append(module)
            print(f"‚ùå {module} - FALTANTE")

    if missing_modules:
        print(f"\n‚ùå M√≥dulos faltantes: {', '.join(missing_modules)}")
        print("\nPara instalar las dependencias faltantes:")
        print("  pip install alembic")
        print("\nO instala todas las dependencias del proyecto:")
        print("  pip install -r backend/requirements.txt")
        return False

    print("‚úÖ Todas las dependencias Python est√°n instaladas")
    return True


class ProyectoSemillaInstaller:
    """
    Instalador interactivo para Proyecto Semilla
    """

    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.env_file = self.project_root / ".env"
        self.required_commands = ["docker", "docker-compose"]

    def print_header(self):
        """Imprimir header del instalador"""
        print("\n" + "="*60)
        print("üå± PROYECTO SEMILLA - INSTALADOR INTERACTIVO")
        print("="*60)
        print("Bienvenido al instalador de Proyecto Semilla")
        print("Este script te guiar√° a trav√©s de la configuraci√≥n inicial.\n")

    def check_prerequisites(self) -> bool:
        """Verificar prerrequisitos del sistema"""
        print("üîç Verificando prerrequisitos...")

        missing_commands = []
        for cmd in self.required_commands:
            if not self.command_exists(cmd):
                missing_commands.append(cmd)

        if missing_commands:
            print(f"‚ùå Comandos faltantes: {', '.join(missing_commands)}")
            print("\nPor favor instala Docker y Docker Compose:")
            print("- Docker: https://docs.docker.com/get-docker/")
            print("- Docker Compose: https://docs.docker.com/compose/install/")
            return False

        print("‚úÖ Todos los prerrequisitos est√°n instalados")
        return True

    def command_exists(self, command: str) -> bool:
        """Verificar si un comando existe en el sistema"""
        try:
            subprocess.run([command, "--version"],
                         capture_output=True,
                         check=True,
                         text=True)
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            return False

    def get_user_input(self, prompt: str, default: str = "", required: bool = False) -> str:
        """Obtener input del usuario con validaci√≥n"""
        while True:
            if default:
                value = input(f"{prompt} (default: {default}): ").strip()
                if not value:
                    return default
            else:
                value = input(f"{prompt}: ").strip()

            if required and not value:
                print("‚ùå Este campo es obligatorio")
                continue

            return value

    def get_yes_no(self, prompt: str, default: bool = True) -> bool:
        """Obtener respuesta s√≠/no del usuario"""
        default_text = "Y/n" if default else "y/N"
        while True:
            response = input(f"{prompt} [{default_text}]: ").strip().lower()
            if not response:
                return default
            if response in ["y", "yes", "s", "si"]:
                return True
            if response in ["n", "no"]:
                return False
            print("Por favor responde 'y' para s√≠ o 'n' para no")

    def configure_environment(self) -> Dict[str, Any]:
        """Configurar variables de entorno"""
        print("\n‚öôÔ∏è Configuraci√≥n del Entorno")
        print("-" * 30)

        config = {}

        # Base de datos
        print("\nüóÑÔ∏è Configuraci√≥n de Base de Datos:")
        config["DB_PASSWORD"] = self.get_user_input(
            "Contrase√±a para PostgreSQL",
            "changeme123",
            required=True
        )

        # JWT
        print("\nüîê Configuraci√≥n de JWT:")
        jwt_secret = self.get_user_input(
            "JWT Secret Key (deja vac√≠o para generar autom√°ticamente)",
            ""
        )
        if not jwt_secret:
            import secrets
            jwt_secret = secrets.token_urlsafe(64)  # Generar JWT_SECRET de al menos 64 caracteres
            print(f"üîë JWT Secret generado: {jwt_secret[:20]}... (longitud: {len(jwt_secret)})")

        config["JWT_SECRET"] = jwt_secret

        # Configuraci√≥n adicional
        config["DEBUG"] = "True" if self.get_yes_no("¬øHabilitar modo debug?", True) else "False"

        return config

    def create_env_file(self, config: Dict[str, Any]):
        """Crear archivo .env con la configuraci√≥n"""
        print("\nüìù Creando archivo .env...")

        env_content = f"""# Proyecto Semilla - Configuraci√≥n de Entorno
# Generado autom√°ticamente por install.py

# Base de datos
DB_PASSWORD={config["DB_PASSWORD"]}
DB_HOST=db
DB_PORT=5432
DB_NAME=proyecto_semilla

# Backend
JWT_SECRET={config["JWT_SECRET"]}
CORS_ORIGINS=http://localhost:7701,http://localhost:7777
DEBUG={config["DEBUG"]}

# Frontend
NEXT_PUBLIC_API_URL=http://localhost:7777

# Configuraci√≥n adicional
LOG_LEVEL=INFO
"""

        try:
            with open(self.env_file, "w", encoding="utf-8") as f:
                f.write(env_content)
            print(f"‚úÖ Archivo .env creado en: {self.env_file}")
        except Exception as e:
            print(f"‚ùå Error creando archivo .env: {e}")
            raise

    def setup_database(self):
        """Configurar la base de datos"""
        print("\nüóÑÔ∏è Configurando Base de Datos...")

        try:
            # Levantar servicios de base de datos
            subprocess.run([
                "docker-compose", "up", "-d", "db", "redis"
            ], cwd=self.project_root, check=True)

            print("‚è≥ Esperando a que los servicios est√©n listos...")
            import time
            time.sleep(15)  # Esperar a que DB y Redis est√©n listos

            # Ejecutar migraciones de Alembic
            print("üì¶ Ejecutando migraciones de base de datos...")
            result = subprocess.run([
                "PYTHONPATH=/app", "python3", "-m", "alembic", "upgrade", "head"
            ], cwd=self.project_root / "backend", capture_output=True, text=True)

            if result.returncode == 0:
                print("‚úÖ Migraciones ejecutadas correctamente")
            else:
                print("‚ùå Error en migraciones:")
                print(result.stderr)
                return False

            print("‚úÖ Base de datos configurada correctamente")
            return True

        except subprocess.CalledProcessError as e:
            print(f"‚ùå Error configurando la base de datos: {e}")
            return False

    def create_superuser(self):
        """Crear usuario superadministrador"""
        print("\nüë§ Creaci√≥n de Superadministrador")
        print("-" * 35)

        if not self.get_yes_no("¬øQuieres crear datos iniciales (superadmin + demo)?", True):
            print("‚ÑπÔ∏è El superadministrador se puede crear desde el frontend despu√©s de iniciar la aplicaci√≥n")
            print("   Accede a la aplicaci√≥n y usa la interfaz de configuraci√≥n inicial")
            return

        print("Ejecutando script de seeding...")
        try:
            import subprocess
            result = subprocess.run([
                "PYTHONPATH=/app", "python3", "-m", "app.initial_data"
            ], cwd=self.project_root / "backend", capture_output=True, text=True)

            if result.returncode == 0:
                print("‚úÖ Datos iniciales creados exitosamente")
                print(result.stdout)
            else:
                print("‚ùå Error creando datos iniciales")
                print(result.stderr)

        except Exception as e:
            print(f"‚ùå Error ejecutando script de seeding: {e}")
            print("Puedes ejecutar manualmente: python -m app.initial_data")

    def test_installation(self):
        """Probar la instalaci√≥n"""
        print("\nüß™ Probando Instalaci√≥n...")

        try:
            # Verificar que los servicios se levanten
            result = subprocess.run([
                "docker-compose", "ps"
            ], cwd=self.project_root, capture_output=True, text=True)

            if result.returncode == 0:
                print("‚úÖ Servicios Docker est√°n ejecut√°ndose")
                return True
            else:
                print("‚ùå Error en los servicios Docker")
                print(result.stderr)
                return False

        except Exception as e:
            print(f"‚ùå Error probando la instalaci√≥n: {e}")
            return False

    def show_next_steps(self):
        """Mostrar pr√≥ximos pasos"""
        print("\n" + "="*60)
        print("üéâ ¬°INSTALACI√ìN COMPLETADA!")
        print("="*60)
        print("\nüìã Pr√≥ximos pasos:")
        print("1. Levantar todos los servicios:")
        print("   docker-compose up -d")
        print("\n2. Verificar instalaci√≥n:")
        print("   python scripts/verify_installation.py")
        print("\n3. Acceder a la aplicaci√≥n:")
        print("   - Frontend: http://localhost:7701")
        print("   - Backend API: http://localhost:7777")
        print("   - Documentaci√≥n API: http://localhost:7777/docs")
        print("   - MCP Server: http://localhost:8001/docs")
        print("\n4. Credenciales de acceso:")
        print("   - Usuario: admin@example.com")
        print("   - Contrase√±a: admin123")
        print("\nüìö Para m√°s informaci√≥n, consulta la documentaci√≥n:")
        print("   https://github.com/proyecto-semilla/proyecto-semilla")

    def run(self):
        """Ejecutar el instalador"""
        self.print_header()

        # Verificar dependencias Python
        if not check_dependencies():
            sys.exit(1)

        # Verificar prerrequisitos
        if not self.check_prerequisites():
            sys.exit(1)

        # Configurar entorno
        config = self.configure_environment()

        # Crear archivo .env
        self.create_env_file(config)

        # Configurar base de datos
        if not self.setup_database():
            print("‚ùå Error en la configuraci√≥n de la base de datos")
            sys.exit(1)

        # Crear superusuario
        self.create_superuser()

        # Probar instalaci√≥n
        if self.test_installation():
            self.show_next_steps()
        else:
            print("‚ùå La instalaci√≥n no se complet√≥ correctamente")
            print("Revisa los logs de Docker para m√°s detalles")
            sys.exit(1)


def main():
    """Funci√≥n principal"""
    try:
        installer = ProyectoSemillaInstaller()
        installer.run()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Instalaci√≥n cancelada por el usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()