"""Sync database with current models, removing obsolete tables

Revision ID: 4859d159e0c9
Revises: 6fe3e393b59c
Create Date: 2025-09-11 06:27:28.713286

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '4859d159e0c9'
down_revision: Union[str, None] = '6fe3e393b59c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    pass


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('articles',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('slug', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('excerpt', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('author_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('seo_title', sa.VARCHAR(length=60), autoincrement=False, nullable=True),
    sa.Column('seo_description', sa.VARCHAR(length=160), autoincrement=False, nullable=True),
    sa.Column('featured_image', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('is_featured', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('view_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('comment_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('like_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tags', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('published_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], name='articles_author_id_fkey'),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], name='articles_category_id_fkey'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='articles_tenant_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='articles_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_articles_title'), 'articles', ['title'], unique=False)
    op.create_index(op.f('ix_articles_tenant_id'), 'articles', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_articles_status'), 'articles', ['status'], unique=False)
    op.create_index(op.f('ix_articles_slug'), 'articles', ['slug'], unique=True)
    op.create_index(op.f('ix_articles_category_id'), 'articles', ['category_id'], unique=False)
    op.create_index(op.f('ix_articles_author_id'), 'articles', ['author_id'], unique=False)
    op.create_index(op.f('idx_articles_tenant_status'), 'articles', ['tenant_id', 'status'], unique=False)
    op.create_index(op.f('idx_articles_tenant_published'), 'articles', ['tenant_id', 'published_at'], unique=False)
    op.create_index(op.f('idx_articles_author'), 'articles', ['author_id'], unique=False)
    op.create_table('room_participants',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('room_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('user_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('user_avatar', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('role', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('is_online', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('last_seen', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('joined_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['room_id'], ['collaboration_rooms.id'], name=op.f('room_participants_room_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('room_participants_pkey'))
    )
    op.create_index(op.f('ix_room_participants_id'), 'room_participants', ['id'], unique=False)
    op.create_table('conflict_resolutions',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('room_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('document_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('conflict_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('original_content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('conflicting_changes', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('resolved_content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('resolved_by', sa.VARCHAR(length=36), autoincrement=False, nullable=True),
    sa.Column('resolution_method', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_.at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('resolved_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['room_id'], ['collaboration_rooms.id'], name=op.f('conflict_resolutions_room_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('conflict_resolutions_pkey'))
    )
    op.create_index(op.f('ix_conflict_resolutions_id'), 'conflict_resolutions', ['id'], unique=False)
    op.create_table('collaborative_sessions',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('room_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('document_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('document_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('session_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('participant_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('last_activity', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['room_id'], ['collaboration_rooms.id'], name=op.f('collaborative_sessions_room_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('collaborative_sessions_pkey'))
    )
    op.create_index(op.f('ix_collaborative_sessions_id'), 'collaborative_sessions', ['id'], unique=False)
    op.create_table('comments',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('article_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('author_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('author_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('is_approved', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_spam', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('parent_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['article_id'], ['articles.id'], name=op.f('comments_article_id_fkey')),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f('comments_tenant_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('comments_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('comments_pkey'))
    )
    op.create_index(op.f('ix_comments_tenant_id'), 'comments', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_comments_article_id'), 'comments', ['article_id'], unique=False)
    op.create_table('room_messages',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('room_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('user_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('message_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('message_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['room_id'], ['collaboration_rooms.id'], name=op.f('room_messages_room_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('room_messages_pkey'))
    )
    op.create_index(op.f('ix_room_messages_id'), 'room_messages', ['id'], unique=False)
    op.create_table('audit_logs',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('event_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('event_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('severity', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=36), autoincrement=False, nullable=True),
    sa.Column('tenant_id', sa.VARCHAR(length=36), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(length=36), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('resource', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('hash', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('audit_logs_pkey'))
    )
    op.create_index(op.f('idx_audit_logs_user_id'), 'audit_logs', ['user_id'], unique=False)
    op.create_index(op.f('idx_audit_logs_timestamp'), 'audit_logs', ['timestamp'], unique=False)
    op.create_index(op.f('idx_audit_logs_tenant_id'), 'audit_logs', ['tenant_id'], unique=False)
    op.create_index(op.f('idx_audit_logs_severity'), 'audit_logs', ['severity'], unique=False)
    op.create_index(op.f('idx_audit_logs_event_type'), 'audit_logs', ['event_type'], unique=False)
    op.create_table('user_cursors',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('room_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('user_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('document_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('position_x', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('position_y', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('selection_start', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('selection_end', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('color', sa.VARCHAR(length=7), autoincrement=False, nullable=True),
    sa.Column('last_updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['room_id'], ['collaboration_rooms.id'], name=op.f('user_cursors_room_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('user_cursors_pkey'))
    )
    op.create_index(op.f('ix_user_cursors_id'), 'user_cursors', ['id'], unique=False)
    op.create_table('categories',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('slug', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('color', sa.VARCHAR(length=7), autoincrement=False, nullable=True),
    sa.Column('parent_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('order_index', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f('categories_tenant_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('categories_pkey'))
    )
    op.create_index(op.f('ix_categories_tenant_id'), 'categories', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_categories_slug'), 'categories', ['slug'], unique=True)
    op.create_index(op.f('ix_categories_name'), 'categories', ['name'], unique=False)
    op.create_table('collaboration_rooms',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('tenant_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('max_participants', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('room_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('settings', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('collaboration_rooms_pkey'))
    )
    op.create_index(op.f('ix_collaboration_rooms_tenant_id'), 'collaboration_rooms', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_collaboration_rooms_id'), 'collaboration_rooms', ['id'], unique=False)
    # ### end Alembic commands ###
